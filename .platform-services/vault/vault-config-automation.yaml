---
apiVersion: batch/v1
kind: Job
metadata:
  name: vault-config-automation
  namespace: vault
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-wave: "3"
spec:
  backoffLimit: 3
  ttlSecondsAfterFinished: 600
  template:
    metadata:
      labels:
        app: vault-config-automation
    spec:
      serviceAccountName: vault-bootstrap
      restartPolicy: Never
      containers:
      - name: vault-config-automation
        image: hashicorp/vault:1.20.1
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          echo "🚀 Starting Vault Configuration Automation..."
          
          # Install prerequisites
          apk add --no-cache curl jq openssl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && mv kubectl /usr/local/bin/
          
          # Connect to Vault
          VAULT_POD_IP=$(kubectl get pod vault-0 -n vault -o jsonpath='{.status.podIP}')
          export VAULT_ADDR="http://$VAULT_POD_IP:8200"
          
          # Wait for Vault to be ready
          until vault status >/dev/null 2>&1; do
            echo "⏳ Waiting for Vault to be ready..."
            sleep 5
          done
          
          # Login with root token
          ROOT_TOKEN=$(kubectl get secret vault-unseal-keys -n vault -o jsonpath='{.data.root-token}' | base64 -d)
          vault login "$ROOT_TOKEN"
          
          echo "🔧 Configuring comprehensive Vault setup..."
          
          # Function to enable secret engines with comprehensive error handling
          enable_secret_engine() {
            local path=$1
            local type=$2
            local description=$3
            echo "🔧 Configuring $type secrets engine at path: $path"
            
            if vault secrets list | grep -q "^$path/"; then
              echo "ℹ️  $type already enabled at $path, checking configuration..."
            else
              if vault secrets enable -path="$path" "$type" >/dev/null 2>&1; then
                echo "✅ Successfully enabled $type at $path"
              else
                echo "❌ Failed to enable $type at $path"
                return 1
              fi
            fi
            
            # Add description metadata
            vault write sys/mounts/$path/tune description="$description" >/dev/null 2>&1 || true
          }
          
          # Function to enable auth methods with comprehensive error handling
          enable_auth_method() {
            local path=$1
            local type=$2
            local description=$3
            echo "🔑 Configuring $type auth method at path: $path"
            
            if vault auth list | grep -q "^$path/"; then
              echo "ℹ️  $type auth already enabled at $path, checking configuration..."
            else
              if vault auth enable -path="$path" "$type" >/dev/null 2>&1; then
                echo "✅ Successfully enabled $type auth at $path"
              else
                echo "❌ Failed to enable $type auth at $path"
                return 1
              fi
            fi
            
            # Add description metadata
            vault write sys/auth/$path/tune description="$description" >/dev/null 2>&1 || true
          }
          
          # Configure all secret engines
          echo "🔧 Configuring Secret Engines..."
          enable_secret_engine "secret" "kv-v2" "Key-Value secrets store version 2"
          enable_secret_engine "aws" "aws" "Amazon Web Services dynamic credentials"
          enable_secret_engine "azure" "azure" "Microsoft Azure dynamic credentials"
          enable_secret_engine "gcp" "gcp" "Google Cloud Platform dynamic credentials"
          enable_secret_engine "database" "database" "Dynamic database credentials"
          enable_secret_engine "ssh" "ssh" "SSH certificate authority"
          enable_secret_engine "pki" "pki" "Public Key Infrastructure certificates"
          enable_secret_engine "transit" "transit" "Encryption and decryption services"
          enable_secret_engine "totp" "totp" "Time-based One-Time Password tokens"
          enable_secret_engine "ldap" "openldap" "LDAP dynamic credentials"
          enable_secret_engine "consul" "consul" "HashiCorp Consul dynamic credentials"
          enable_secret_engine "nomad" "nomad" "HashiCorp Nomad dynamic credentials"
          enable_secret_engine "rabbitmq" "rabbitmq" "RabbitMQ dynamic credentials"
          
          # Configure all auth methods
          echo "🔑 Configuring Auth Methods..."
          enable_auth_method "kubernetes" "kubernetes" "Kubernetes service account authentication"
          enable_auth_method "aws" "aws" "Amazon Web Services IAM authentication"
          enable_auth_method "azure" "azure" "Microsoft Azure authentication"
          enable_auth_method "gcp" "gcp" "Google Cloud Platform authentication"
          enable_auth_method "ldap" "ldap" "LDAP directory authentication"
          enable_auth_method "userpass" "userpass" "Username and password authentication"
          enable_auth_method "oidc" "oidc" "OpenID Connect authentication"
          enable_auth_method "jwt" "jwt" "JSON Web Token authentication"
          enable_auth_method "approle" "approle" "Application role authentication"
          enable_auth_method "cert" "cert" "TLS certificate authentication"
          
          # Advanced PKI Configuration
          echo "📜 Configuring PKI Certificate Authority..."
          vault write pki/config/urls \
            issuing_certificates="$VAULT_ADDR/v1/pki/ca" \
            crl_distribution_points="$VAULT_ADDR/v1/pki/crl" >/dev/null 2>&1 || true
          
          # Transit encryption key
          echo "🔐 Creating Transit Encryption Keys..."
          vault write transit/keys/platform >/dev/null 2>&1 || true
          vault write transit/keys/base-layer >/dev/null 2>&1 || true
          vault write transit/keys/ml-platform >/dev/null 2>&1 || true
          
          # Create comprehensive audit log
          echo "📝 Enabling Audit Logging..."
          vault audit enable file file_path=/vault/logs/audit.log >/dev/null 2>&1 || true
          
          # Configure comprehensive policies
          echo "📋 Creating Comprehensive Policies..."
          
          # Developer policy with comprehensive access
          vault policy write developer - << 'EOF'
          # KV v2 secrets access
          path "secret/data/development/*" { capabilities = ["create", "read", "update", "delete", "list"] }
          path "secret/metadata/development/*" { capabilities = ["list"] }
          
          # Cloud credentials access
          path "aws/creds/dev-*" { capabilities = ["read"] }
          path "azure/creds/dev-*" { capabilities = ["read"] }
          path "gcp/token/dev-*" { capabilities = ["read"] }
          
          # Database access
          path "database/creds/dev-*" { capabilities = ["read"] }
          
          # SSH and PKI
          path "ssh/sign/developer" { capabilities = ["create", "update"] }
          path "pki/issue/developer" { capabilities = ["create", "update"] }
          
          # Transit encryption
          path "transit/encrypt/development" { capabilities = ["create", "update"] }
          path "transit/decrypt/development" { capabilities = ["create", "update"] }
          
          # TOTP
          path "totp/code/dev-*" { capabilities = ["create", "update"] }
          EOF
          
          # Production policy with restricted access
          vault policy write production - << 'EOF'
          # Read-only access to production secrets
          path "secret/data/production/*" { capabilities = ["read", "list"] }
          path "secret/metadata/production/*" { capabilities = ["list"] }
          
          # Production credentials access
          path "aws/creds/prod-*" { capabilities = ["read"] }
          path "azure/creds/prod-*" { capabilities = ["read"] }
          path "gcp/token/prod-*" { capabilities = ["read"] }
          path "database/creds/prod-*" { capabilities = ["read"] }
          
          # Production encryption
          path "transit/encrypt/production" { capabilities = ["create", "update"] }
          path "transit/decrypt/production" { capabilities = ["create", "update"] }
          EOF
          
          # Store automation completion timestamp
          vault kv put secret/platform/automation \
            status="completed" \
            timestamp="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            secret-engines="$(vault secrets list -format=json | jq -c 'keys')" \
            auth-methods="$(vault auth list -format=json | jq -c 'keys')" \
            version="1.0.0"
          
          echo ""
          echo "🎉 COMPREHENSIVE VAULT CONFIGURATION COMPLETED!"
          echo "=============================================="
          echo ""
          echo "📊 Configuration Summary:"
          echo "------------------------"
          echo "🔐 Secrets Engines Configured:"
          vault secrets list -format=table | head -20
          echo ""
          echo "🔑 Auth Methods Configured:"
          vault auth list -format=table | head -15
          echo ""
          echo "📋 Policies Created:"
          vault policy list
          echo ""
          echo "🔧 Configuration stored in: secret/platform/automation"
          echo "=============================================="
          
        env:
        - name: VAULT_SKIP_VERIFY
          value: "true"
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"