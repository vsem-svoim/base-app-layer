---
apiVersion: batch/v1
kind: Job
metadata:
  name: vault-validation-hook
  namespace: vault
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-wave: "4"
spec:
  backoffLimit: 2
  ttlSecondsAfterFinished: 3600
  template:
    metadata:
      labels:
        app: vault-validation-hook
    spec:
      serviceAccountName: vault-bootstrap
      restartPolicy: Never
      containers:
      - name: vault-validation
        image: hashicorp/vault:1.20.1
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          echo "üîç Starting Vault Configuration Validation..."
          
          # Install prerequisites
          apk add --no-cache curl jq openssl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && mv kubectl /usr/local/bin/
          
          # Connect to Vault
          VAULT_POD_IP=$(kubectl get pod vault-0 -n vault -o jsonpath='{.status.podIP}')
          export VAULT_ADDR="http://$VAULT_POD_IP:8200"
          
          # Login with root token
          ROOT_TOKEN=$(kubectl get secret vault-unseal-keys -n vault -o jsonpath='{.data.root-token}' | base64 -d)
          vault login "$ROOT_TOKEN"
          
          # Validation counters
          TOTAL_CHECKS=0
          PASSED_CHECKS=0
          FAILED_CHECKS=0
          
          # Function to validate secret engine
          validate_secret_engine() {
            local path=$1
            local type=$2
            TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
            
            if vault secrets list | grep -q "^$path/"; then
              echo "‚úÖ Secret engine $type at $path: ENABLED"
              PASSED_CHECKS=$((PASSED_CHECKS + 1))
              return 0
            else
              echo "‚ùå Secret engine $type at $path: NOT FOUND"
              FAILED_CHECKS=$((FAILED_CHECKS + 1))
              return 1
            fi
          }
          
          # Function to validate auth method
          validate_auth_method() {
            local path=$1
            local type=$2
            TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
            
            if vault auth list | grep -q "^$path/"; then
              echo "‚úÖ Auth method $type at $path: ENABLED"
              PASSED_CHECKS=$((PASSED_CHECKS + 1))
              return 0
            else
              echo "‚ùå Auth method $type at $path: NOT FOUND"
              FAILED_CHECKS=$((FAILED_CHECKS + 1))
              return 1
            fi
          }
          
          # Function to validate policy
          validate_policy() {
            local policy_name=$1
            TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
            
            if vault policy list | grep -q "^$policy_name$"; then
              echo "‚úÖ Policy $policy_name: FOUND"
              PASSED_CHECKS=$((PASSED_CHECKS + 1))
              return 0
            else
              echo "‚ùå Policy $policy_name: NOT FOUND"
              FAILED_CHECKS=$((FAILED_CHECKS + 1))
              return 1
            fi
          }
          
          # Function to test secret engine functionality
          test_secret_engine() {
            local path=$1
            local type=$2
            TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
            
            case $type in
              "kv-v2")
                if vault kv put $path/test key=value >/dev/null 2>&1 && vault kv get $path/test >/dev/null 2>&1; then
                  echo "‚úÖ KV-v2 engine at $path: FUNCTIONAL"
                  vault kv delete $path/test >/dev/null 2>&1
                  PASSED_CHECKS=$((PASSED_CHECKS + 1))
                else
                  echo "‚ùå KV-v2 engine at $path: NOT FUNCTIONAL"
                  FAILED_CHECKS=$((FAILED_CHECKS + 1))
                fi
                ;;
              "transit")
                if vault write $path/keys/test-key >/dev/null 2>&1; then
                  echo "‚úÖ Transit engine at $path: FUNCTIONAL"
                  PASSED_CHECKS=$((PASSED_CHECKS + 1))
                else
                  echo "‚ùå Transit engine at $path: NOT FUNCTIONAL"
                  FAILED_CHECKS=$((FAILED_CHECKS + 1))
                fi
                ;;
              *)
                echo "‚ÑπÔ∏è  Skipping functional test for $type (not implemented)"
                TOTAL_CHECKS=$((TOTAL_CHECKS - 1))
                ;;
            esac
          }
          
          echo ""
          echo "üîç VALIDATING SECRET ENGINES"
          echo "============================="
          validate_secret_engine "secret" "kv-v2"
          validate_secret_engine "aws" "aws"
          validate_secret_engine "azure" "azure"
          validate_secret_engine "gcp" "gcp"
          validate_secret_engine "database" "database"
          validate_secret_engine "ssh" "ssh"
          validate_secret_engine "pki" "pki"
          validate_secret_engine "transit" "transit"
          validate_secret_engine "totp" "totp"
          validate_secret_engine "ldap" "openldap"
          validate_secret_engine "consul" "consul"
          validate_secret_engine "nomad" "nomad"
          validate_secret_engine "rabbitmq" "rabbitmq"
          
          echo ""
          echo "üîç VALIDATING AUTH METHODS"
          echo "=========================="
          validate_auth_method "kubernetes" "kubernetes"
          validate_auth_method "aws" "aws"
          validate_auth_method "azure" "azure"
          validate_auth_method "gcp" "gcp"
          validate_auth_method "ldap" "ldap"
          validate_auth_method "userpass" "userpass"
          validate_auth_method "oidc" "oidc"
          validate_auth_method "jwt" "jwt"
          validate_auth_method "approle" "approle"
          validate_auth_method "cert" "cert"
          
          echo ""
          echo "üîç VALIDATING POLICIES"
          echo "====================="
          validate_policy "admin"
          validate_policy "platform-services"
          validate_policy "base-layer"
          validate_policy "ml-platform"
          validate_policy "developer"
          validate_policy "production"
          
          echo ""
          echo "üîç TESTING FUNCTIONALITY"
          echo "======================="
          test_secret_engine "secret" "kv-v2"
          test_secret_engine "transit" "transit"
          
          # Store validation results
          vault kv put secret/platform/validation \
            timestamp="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            total-checks="$TOTAL_CHECKS" \
            passed-checks="$PASSED_CHECKS" \
            failed-checks="$FAILED_CHECKS" \
            success-rate="$(echo "scale=2; $PASSED_CHECKS * 100 / $TOTAL_CHECKS" | bc -l || echo "N/A")" \
            status="$([ $FAILED_CHECKS -eq 0 ] && echo "PASSED" || echo "FAILED")"
          
          echo ""
          echo "üìä VALIDATION SUMMARY"
          echo "===================="
          echo "üìã Total Checks: $TOTAL_CHECKS"
          echo "‚úÖ Passed: $PASSED_CHECKS"
          echo "‚ùå Failed: $FAILED_CHECKS"
          
          if [ $FAILED_CHECKS -eq 0 ]; then
            echo ""
            echo "üéâ ALL VALIDATIONS PASSED!"
            echo "üîê Vault is properly configured with all required engines and methods"
            echo "üìä Results stored in: secret/platform/validation"
          else
            echo ""
            echo "‚ö†Ô∏è  SOME VALIDATIONS FAILED"
            echo "‚ùå $FAILED_CHECKS out of $TOTAL_CHECKS checks failed"
            echo "üîß Please review the configuration and re-run deployment"
            exit 1
          fi
          
        env:
        - name: VAULT_SKIP_VERIFY
          value: "true"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"