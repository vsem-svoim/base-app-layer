apiVersion: v1
kind: ServiceAccount
metadata:
  name: platform-ui-sa
  namespace: argocd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: platform-ui-reader
rules:
- apiGroups: [""]
  resources: ["pods", "services", "namespaces", "nodes"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets"]
  verbs: ["get", "list"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: platform-ui-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: platform-ui-reader
subjects:
- kind: ServiceAccount
  name: platform-ui-sa
  namespace: argocd
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: platform-ui-dashboard
  namespace: argocd
  labels:
    app: platform-ui-dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: platform-ui-dashboard
  template:
    metadata:
      labels:
        app: platform-ui-dashboard
    spec:
      serviceAccountName: platform-ui-sa
      nodeSelector:
        eks.amazonaws.com/nodegroup: platform_system
      containers:
      - name: dashboard
        image: python:3.11-slim
        ports:
        - containerPort: 8501
        command: ["/bin/bash"]
        args: ["-c", "pip install streamlit kubernetes && streamlit run /app/dashboard.py --server.port=8501 --server.address=0.0.0.0"]
        volumeMounts:
        - name: dashboard-config
          mountPath: /app
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
      volumes:
      - name: dashboard-config
        configMap:
          name: platform-ui-config
---
apiVersion: v1
kind: Service
metadata:
  name: platform-ui
  namespace: argocd
  labels:
    app: platform-ui-dashboard
spec:
  type: ClusterIP
  ports:
  - name: streamlit
    port: 8501
    targetPort: 8501
    protocol: TCP
  - name: health
    port: 80
    targetPort: 8501
    protocol: TCP
  selector:
    app: platform-ui-dashboard
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: platform-ui-config
  namespace: argocd
data:
  dashboard.py: |
    import streamlit as st
    from datetime import datetime
    
    st.set_page_config(page_title="BASE Platform", layout="wide")
    
    st.markdown("""
    <style>
    .stApp { background: #0a0e1a; color: #e4e7eb; }
    .app-tile { background: #161b22; border: 1px solid #30363d; border-radius: 6px; padding: 1.5rem; margin: 1rem 0; }
    .app-tile:hover { border-color: #58a6ff; cursor: pointer; }
    .status-active { background: #238636; color: white; padding: 0.3rem 0.8rem; border-radius: 4px; font-size: 0.8rem; }
    .status-pending { background: #9a6700; color: white; padding: 0.3rem 0.8rem; border-radius: 4px; font-size: 0.8rem; }
    .stButton > button { background-color: #238636 !important; color: white !important; }
    </style>
    """, unsafe_allow_html=True)
    
    st.title("BASE Platform Console")
    st.markdown("**Real-time Enterprise Data Platform Status**")
    
    # Use Kubernetes API to get real data
    def get_k8s_data():
        try:
            from kubernetes import client, config
            
            # Try to load in-cluster config (when running in pod)
            try:
                config.load_incluster_config()
            except:
                # Fallback to local config (for development)
                config.load_kube_config()
            
            v1 = client.CoreV1Api()
            apps_v1 = client.AppsV1Api()
            
            # Get nodes
            nodes = v1.list_node()
            node_count = len(nodes.items)
            
            # Get namespaces
            namespaces = v1.list_namespace()
            ns_count = len(namespaces.items)
            
            # Check specific namespaces and pods
            namespace_data = {}
            target_namespaces = ["argocd", "vault", "istio-system", "monitoring", "airflow"]
            
            for ns in target_namespaces:
                try:
                    pods = v1.list_namespaced_pod(namespace=ns)
                    running_pods = len([p for p in pods.items if p.status.phase == "Running" and all(cs.ready for cs in (p.status.container_statuses or []))])
                    total_pods = len(pods.items)
                    
                    services = v1.list_namespaced_service(namespace=ns)
                    service_count = len(services.items)
                    
                    namespace_data[ns] = {
                        "exists": True,
                        "running": running_pods,
                        "total": total_pods,
                        "services": service_count
                    }
                except:
                    namespace_data[ns] = {"exists": False, "running": 0, "total": 0, "services": 0}
            
            # Get ALB hostname
            try:
                networking_v1 = client.NetworkingV1Api()
                ingress = networking_v1.read_namespaced_ingress(name="platform-alb", namespace="argocd")
                alb_hostname = ingress.status.load_balancer.ingress[0].hostname if ingress.status.load_balancer.ingress else None
            except:
                alb_hostname = None
            
            return {
                "nodes": node_count,
                "namespaces": ns_count,
                "alb": alb_hostname,
                "namespace_data": namespace_data
            }
            
        except Exception as e:
            st.error(f"Unable to connect to Kubernetes API: {str(e)}")
            return None
    
    # Try to get real data, fallback to static if API not available
    k8s_data = get_k8s_data()
    
    if k8s_data:
        # Real data from K8s API
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Cluster Nodes", str(k8s_data["nodes"]), "EKS Managed")
        with col2:
            st.metric("Namespaces", str(k8s_data["namespaces"]), "Active")
        with col3:
            if k8s_data["alb"]:
                st.metric("Load Balancer", "ACTIVE", k8s_data["alb"][:20] + "...")
            else:
                st.metric("Load Balancer", "NOT FOUND")
        with col4:
            active_services = sum([1 for ns_data in k8s_data["namespace_data"].values() if ns_data["running"] > 0])
            st.metric("Active Services", f"{active_services}/5", f"{int(active_services/5*100)}% operational")
        
        st.divider()
        
        # Real application status
        st.markdown("### Platform Applications")
        
        base_url = f"http://{k8s_data['alb']}" if k8s_data["alb"] else "ALB_NOT_CONFIGURED"
        
        # ArgoCD
        argocd = k8s_data["namespace_data"]["argocd"]
        if argocd["running"] > 0:
            st.markdown(f"""
            <div class="app-tile" onclick="window.open('{base_url}/argocd', '_blank')">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0; color: #f0f6fc;">ArgoCD</h4>
                    <span class="status-active">ACTIVE</span>
                </div>
                <p>GitOps Continuous Deployment</p>
                <p><strong>Status:</strong> {argocd["running"]}/{argocd["total"]} pods running, {argocd["services"]} services</p>
                <p style="font-family: monospace; color: #58a6ff;">{base_url}/argocd</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div class="app-tile" style="opacity: 0.6;">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0;">ArgoCD</h4>
                    <span class="status-pending">NOT RUNNING</span>
                </div>
                <p>GitOps Continuous Deployment</p>
                <p><strong>Status:</strong> {argocd["total"]} pods found, {argocd["running"]} running in argocd namespace</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Vault
        vault = k8s_data["namespace_data"]["vault"]
        if vault["running"] > 0:
            st.markdown(f"""
            <div class="app-tile" onclick="window.open('{base_url}/vault', '_blank')">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0; color: #f0f6fc;">HashiCorp Vault</h4>
                    <span class="status-active">ACTIVE</span>
                </div>
                <p>Secrets Management</p>
                <p><strong>Status:</strong> {vault["running"]}/{vault["total"]} pods running, {vault["services"]} services</p>
                <p style="font-family: monospace; color: #58a6ff;">{base_url}/vault</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div class="app-tile" style="opacity: 0.6;">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0;">HashiCorp Vault</h4>
                    <span class="status-pending">NOT RUNNING</span>
                </div>
                <p>Secrets Management</p>
                <p><strong>Status:</strong> {vault["total"]} pods found, {vault["running"]} running in vault namespace</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Istio
        istio = k8s_data["namespace_data"]["istio-system"]
        if istio["running"] > 0:
            st.markdown(f"""
            <div class="app-tile" onclick="window.open('{base_url}/kiali', '_blank')">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0; color: #f0f6fc;">Istio Service Mesh</h4>
                    <span class="status-active">ACTIVE</span>
                </div>
                <p>Traffic Management & Security</p>
                <p><strong>Status:</strong> {istio["running"]}/{istio["total"]} pods running, {istio["services"]} services</p>
                <p style="font-family: monospace; color: #58a6ff;">{base_url}/kiali</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div class="app-tile" style="opacity: 0.6;">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0;">Istio Service Mesh</h4>
                    <span class="status-pending">NOT RUNNING</span>
                </div>
                <p>Traffic Management & Security</p>
                <p><strong>Status:</strong> {istio["total"]} pods found, {istio["running"]} running in istio-system namespace</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Monitoring
        monitoring = k8s_data["namespace_data"]["monitoring"]
        if monitoring["running"] > 0:
            st.markdown(f"""
            <div class="app-tile" onclick="window.open('{base_url}/grafana', '_blank')">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0; color: #f0f6fc;">Monitoring Stack</h4>
                    <span class="status-active">ACTIVE</span>
                </div>
                <p>Grafana, Prometheus, AlertManager</p>
                <p><strong>Status:</strong> {monitoring["running"]}/{monitoring["total"]} pods running, {monitoring["services"]} services</p>
                <p style="font-family: monospace; color: #58a6ff;">{base_url}/grafana</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div class="app-tile" style="opacity: 0.6;">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0;">Monitoring Stack</h4>
                    <span class="status-pending">NOT DEPLOYED</span>
                </div>
                <p>Grafana, Prometheus, AlertManager</p>
                <p><strong>Deploy:</strong> ./deploy-platform.sh shared</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Airflow
        airflow = k8s_data["namespace_data"]["airflow"]
        if airflow["running"] > 0:
            st.markdown(f"""
            <div class="app-tile" onclick="window.open('{base_url}/airflow', '_blank')">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0; color: #f0f6fc;">Apache Airflow</h4>
                    <span class="status-active">ACTIVE</span>
                </div>
                <p>Workflow Orchestration</p>
                <p><strong>Status:</strong> {airflow["running"]}/{airflow["total"]} pods running, {airflow["services"]} services</p>
                <p style="font-family: monospace; color: #58a6ff;">{base_url}/airflow</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div class="app-tile" style="opacity: 0.6;">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0;">Apache Airflow</h4>
                    <span class="status-pending">NOT DEPLOYED</span>
                </div>
                <p>Workflow Orchestration</p>
                <p><strong>Deploy:</strong> ./deploy-platform.sh orchestration</p>
            </div>
            """, unsafe_allow_html=True)
        
        st.divider()
        
        # Real deployment waves
        st.markdown("### Real Deployment Status")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if argocd["running"] > 0:
                st.success("**Wave 0: Core**")
                st.text(f"ArgoCD: {argocd['running']}/{argocd['total']} running")
                st.text("✓ DEPLOYED")
            else:
                st.error("**Wave 0: Core**")
                st.text(f"ArgoCD: {argocd['running']}/{argocd['total']} running")
                st.text("✗ FAILED")
        
        with col2:
            vault_ok = vault["running"] > 0
            istio_ok = istio["running"] > 0
            if vault_ok and istio_ok:
                st.success("**Wave 1: Infrastructure**")
                st.text(f"Vault: {vault['running']}/{vault['total']}")
                st.text(f"Istio: {istio['running']}/{istio['total']}")
                st.text("✓ DEPLOYED")
            elif vault_ok or istio_ok:
                st.warning("**Wave 1: Infrastructure**")
                st.text(f"Vault: {vault['running']}/{vault['total']}")
                st.text(f"Istio: {istio['running']}/{istio['total']}")
                st.text("◐ PARTIAL")
            else:
                st.error("**Wave 1: Infrastructure**")
                st.text(f"Vault: {vault['running']}/{vault['total']}")
                st.text(f"Istio: {istio['running']}/{istio['total']}")
                st.text("✗ FAILED")
        
        with col3:
            if monitoring["running"] > 0:
                st.success("**Wave 2: Shared**")
                st.text(f"Monitoring: {monitoring['running']}/{monitoring['total']}")
                st.text("✓ DEPLOYED")
            else:
                st.warning("**Wave 2: Shared**")
                st.text("Monitoring: Not deployed")
                st.text("○ PENDING")
        
        with col4:
            if airflow["running"] > 0:
                st.success("**Wave 3: Orchestration**")
                st.text(f"Airflow: {airflow['running']}/{airflow['total']}")
                st.text("✓ DEPLOYED")
            else:
                st.warning("**Wave 3: Orchestration**")
                st.text("Airflow: Not deployed")
                st.text("○ PENDING")
        
        # Footer with real data
        st.divider()
        st.caption(f"Updated: {datetime.now().strftime('%H:%M:%S UTC')} | {active_services}/5 services running | Cluster: {k8s_data['nodes']} nodes")
        
    else:
        # Fallback when K8s API not available
        st.error("Unable to connect to Kubernetes API. Dashboard running in limited mode.")
        st.metric("Status", "API Connection Failed")
    
    # Platform operations
    st.divider()
    st.markdown("### Platform Operations")
    
    op_col1, op_col2, op_col3 = st.columns(3)
    
    with op_col1:
        if st.button("Deploy Shared Services", use_container_width=True):
            st.code("./deploy-platform.sh shared")
            st.info("Deploys Prometheus, Grafana, ELK stack")
    
    with op_col2:
        if st.button("Deploy Orchestration", use_container_width=True):
            st.code("./deploy-platform.sh orchestration")
            st.info("Deploys Airflow, MLflow")
    
    with op_col3:
        if st.button("Validate Platform", use_container_width=True):
            st.code("./deploy-platform.sh validate")
            st.info("Health checks on all services")