apiVersion: v1
kind: ServiceAccount
metadata:
  name: platform-ui-sa
  namespace: argocd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: platform-ui-reader
rules:
- apiGroups: [""]
  resources: ["pods", "services", "namespaces", "nodes"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets"]
  verbs: ["get", "list"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: platform-ui-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: platform-ui-reader
subjects:
- kind: ServiceAccount
  name: platform-ui-sa
  namespace: argocd
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: platform-ui-dashboard
  namespace: argocd
  labels:
    app: platform-ui-dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: platform-ui-dashboard
  template:
    metadata:
      labels:
        app: platform-ui-dashboard
    spec:
      serviceAccountName: platform-ui-sa
      nodeSelector:
        eks.amazonaws.com/nodegroup: platform_system
      containers:
      - name: dashboard
        image: python:3.11
        ports:
        - containerPort: 8501
        - containerPort: 8080
        command: ["/bin/sh"]
        args: ["-c", "pip install streamlit kubernetes flask && python /app/health.py & python -m streamlit run /app/dashboard.py --server.port=8501 --server.address=0.0.0.0"]
        volumeMounts:
        - name: dashboard-config
          mountPath: /app
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: dashboard-config
        configMap:
          name: platform-ui-config
---
apiVersion: v1
kind: Service
metadata:
  name: platform-ui
  namespace: argocd
  labels:
    app: platform-ui-dashboard
spec:
  type: ClusterIP
  ports:
  - name: streamlit
    port: 8501
    targetPort: 8501
    protocol: TCP
  - name: health
    port: 80
    targetPort: 8080
    protocol: TCP
  selector:
    app: platform-ui-dashboard
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: platform-ui-config
  namespace: argocd
data:
  health.py: |
    from flask import Flask
    app = Flask(__name__)
    
    @app.route('/')
    @app.route('/health')
    def health():
        return "OK", 200
    
    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=8080)

  dashboard.py: |
    import streamlit as st
    from datetime import datetime
    
    st.set_page_config(page_title="BASE Platform", layout="wide")
    
    st.markdown("""
    <style>
    .stApp { background: #0a0e1a; color: #e4e7eb; }
    .app-tile { 
        background: #161b22; border: 1px solid #30363d; border-radius: 6px; 
        padding: 1.5rem; margin: 1rem 0; transition: all 0.2s;
    }
    .app-tile:hover { border-color: #58a6ff; }
    .status-active { background: #238636; color: white; padding: 0.3rem 0.8rem; border-radius: 4px; font-size: 0.8rem; }
    .status-pending { background: #9a6700; color: white; padding: 0.3rem 0.8rem; border-radius: 4px; font-size: 0.8rem; }
    .stButton > button { 
        background-color: #238636 !important; 
        color: white !important; 
        border: 1px solid #2ea043 !important;
        width: 100% !important;
    }
    .stButton > button:hover { background-color: #2ea043 !important; }
    .service-url { font-family: monospace; color: #58a6ff; font-size: 0.9rem; }
    .deployment-status { font-size: 0.8rem; color: #8b949e; }
    </style>
    """, unsafe_allow_html=True)
    
    st.title("BASE Platform Console")
    st.markdown("**Enterprise Data Platform - Internal Service Access**")
    
    def get_k8s_data():
        try:
            from kubernetes import client, config
            
            try:
                config.load_incluster_config()
            except:
                return None
            
            v1 = client.CoreV1Api()
            
            nodes = v1.list_node()
            node_count = len(nodes.items)
            
            namespace_data = {}
            target_namespaces = ["argocd", "vault", "istio-system", "monitoring", "airflow"]
            
            for ns in target_namespaces:
                try:
                    pods = v1.list_namespaced_pod(namespace=ns)
                    running_pods = len([p for p in pods.items if p.status.phase == "Running" and 
                                      all(cs.ready for cs in (p.status.container_statuses or []))])
                    total_pods = len(pods.items)
                    
                    services = v1.list_namespaced_service(namespace=ns)
                    service_list = [(svc.metadata.name, svc.spec.ports[0].port if svc.spec.ports else 80) 
                                   for svc in services.items if svc.metadata.name != "kubernetes"]
                    
                    namespace_data[ns] = {
                        "running": running_pods,
                        "total": total_pods,
                        "services": service_list
                    }
                except:
                    namespace_data[ns] = {"running": 0, "total": 0, "services": []}
            
            try:
                networking_v1 = client.NetworkingV1Api()
                ingress = networking_v1.read_namespaced_ingress(name="platform-alb", namespace="argocd")
                alb_hostname = ingress.status.load_balancer.ingress[0].hostname if ingress.status.load_balancer.ingress else None
            except:
                alb_hostname = None
            
            return {
                "nodes": node_count,
                "alb": alb_hostname,
                "namespace_data": namespace_data
            }
            
        except Exception:
            return None
    
    k8s_data = get_k8s_data()
    
    if k8s_data:
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Cluster Nodes", str(k8s_data["nodes"]))
        with col2:
            active_services = sum([1 for ns_data in k8s_data["namespace_data"].values() if ns_data["running"] > 0])
            st.metric("Active Services", f"{active_services}/5")
        with col3:
            if k8s_data["alb"]:
                st.metric("External ALB", "ACTIVE")
            else:
                st.metric("External ALB", "NOT FOUND")
        with col4:
            st.metric("Access Method", "Internal")
        
        st.divider()
        st.markdown("### Platform Applications")
        
        # Service routing table
        service_routes = {
            "argocd": ("argocd-server.argocd.svc.cluster.local", 80, "ArgoCD", "GitOps Continuous Deployment"),
            "vault": ("vault.vault.svc.cluster.local", 8200, "HashiCorp Vault", "Secrets Management"),
            "istio-system": ("kiali.istio-system.svc.cluster.local", 20001, "Istio Service Mesh", "Traffic Management & Security"),
            "monitoring": ("grafana.monitoring.svc.cluster.local", 80, "Monitoring Stack", "Grafana, Prometheus, AlertManager"),
            "airflow": ("airflow-webserver.airflow.svc.cluster.local", 8080, "Apache Airflow", "Workflow Orchestration")
        }
        
        for namespace, (internal_url, port, service_name, description) in service_routes.items():
            ns_data = k8s_data["namespace_data"][namespace]
            
            if ns_data["running"] > 0:
                st.markdown(f"""
                <div class="app-tile">
                    <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                        <h4 style="margin: 0; color: #f0f6fc;">{service_name}</h4>
                        <span class="status-active">ACTIVE</span>
                    </div>
                    <p>{description}</p>
                    <p><strong>Status:</strong> {ns_data["running"]}/{ns_data["total"]} pods running</p>
                    <p class="service-url">Internal: {internal_url}:{port}</p>
                    <p class="deployment-status">Access via port-forward: kubectl port-forward -n {namespace} svc/{internal_url.split('.')[0]} {port}:{port}</p>
                </div>
                """, unsafe_allow_html=True)
                
                # Port-forward button
                col_a, col_b = st.columns([1, 2])
                with col_a:
                    if st.button(f"Port-forward {service_name}", key=f"pf_{namespace}"):
                        st.code(f"kubectl port-forward -n {namespace} svc/{internal_url.split('.')[0]} {port}:{port}")
                        st.success(f"Run command above, then access: http://localhost:{port}")
                
                with col_b:
                    if k8s_data["alb"] and st.button(f"External URL", key=f"ext_{namespace}"):
                        external_path = namespace.replace("istio-system", "kiali").replace("monitoring", "grafana")
                        external_url = f"http://{k8s_data['alb']}/{external_path}"
                        st.markdown(f"**External:** [{external_url}]({external_url})")
            else:
                st.markdown(f"""
                <div class="app-tile" style="opacity: 0.6;">
                    <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                        <h4 style="margin: 0;">{service_name}</h4>
                        <span class="status-pending">NOT DEPLOYED</span>
                    </div>
                    <p>{description}</p>
                    <p class="deployment-status">Deploy: ./deploy-platform.sh {namespace.replace('istio-system', 'core').replace('monitoring', 'shared').replace('airflow', 'orchestration')}</p>
                </div>
                """, unsafe_allow_html=True)
        
        st.divider()
        
        # Deployment status summary  
        st.markdown("### Deployment Status")
        
        waves = [
            ("Wave 0: Core", ["argocd"]),
            ("Wave 1: Infrastructure", ["vault", "istio-system"]),
            ("Wave 2: Shared", ["monitoring"]),
            ("Wave 3: Orchestration", ["airflow"])
        ]
        
        wave_cols = st.columns(4)
        for i, (wave_name, namespaces) in enumerate(waves):
            with wave_cols[i]:
                total_running = sum([k8s_data["namespace_data"][ns]["running"] for ns in namespaces])
                total_expected = len(namespaces)
                
                if total_running == total_expected and total_running > 0:
                    st.success(f"**{wave_name}**")
                    st.text("✓ DEPLOYED")
                elif total_running > 0:
                    st.warning(f"**{wave_name}**")
                    st.text("◐ PARTIAL")
                else:
                    st.error(f"**{wave_name}**")
                    st.text("○ PENDING")
        
        st.divider()
        st.caption(f"Updated: {datetime.now().strftime('%H:%M:%S UTC')} | Internal cluster routing enabled")
        
    else:
        st.error("Cannot connect to Kubernetes API")
        st.markdown("""
        **Alternative Access Methods:**
        
        ```bash
        # ArgoCD
        kubectl port-forward -n argocd svc/argocd-server 8080:80
        
        # Vault  
        kubectl port-forward -n vault svc/vault 8200:8200
        
        # Grafana
        kubectl port-forward -n monitoring svc/grafana 3000:80
        
        # Airflow
        kubectl port-forward -n airflow svc/airflow-webserver 8081:8080
        ```
        """)
    
    # Platform operations
    st.divider()
    st.markdown("### Platform Operations")
    
    op_col1, op_col2, op_col3 = st.columns(3)
    
    with op_col1:
        if st.button("Deploy Shared Services", use_container_width=True):
            st.code("./deploy-platform.sh shared")
    
    with op_col2:
        if st.button("Deploy Orchestration", use_container_width=True):
            st.code("./deploy-platform.sh orchestration")
    
    with op_col3:
        if st.button("Validate Platform", use_container_width=True):
            st.code("./deploy-platform.sh validate")