apiVersion: v1
kind: ConfigMap
metadata:
  name: platform-ui-config
  namespace: argocd
data:
  dashboard.py: |
    import streamlit as st
    from datetime import datetime
    import threading
    from http.server import HTTPServer, BaseHTTPRequestHandler
    
    # Simple health check server
    class HealthHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/health' or self.path == '/':
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(b'OK')
            else:
                self.send_response(404)
                self.end_headers()
    
    # Start health server in background
    def start_health_server():
        server = HTTPServer(('0.0.0.0', 8080), HealthHandler)
        server.serve_forever()
    
    health_thread = threading.Thread(target=start_health_server, daemon=True)
    health_thread.start()
    
    st.set_page_config(page_title="BASE Platform", layout="wide")
    
    # CSS with clickable functionality
    st.markdown("""
    <style>
    .stApp { background: #0a0e1a; color: #e4e7eb; }
    .app-tile { 
        background: #161b22; border: 1px solid #30363d; border-radius: 6px; 
        padding: 1.5rem; margin: 1rem 0; cursor: pointer; transition: all 0.2s;
    }
    .app-tile:hover { border-color: #58a6ff; transform: translateY(-2px); }
    .status-active { background: #238636; color: white; padding: 0.3rem 0.8rem; border-radius: 4px; font-size: 0.8rem; }
    .status-pending { background: #9a6700; color: white; padding: 0.3rem 0.8rem; border-radius: 4px; font-size: 0.8rem; }
    .stButton > button { background-color: #238636 !important; color: white !important; }
    </style>
    """, unsafe_allow_html=True)
    
    st.title("BASE Platform Console")
    st.markdown("**Real-time Enterprise Data Platform Status**")
    
    # Kubernetes API integration
    def get_k8s_data():
        try:
            from kubernetes import client, config
            
            try:
                config.load_incluster_config()
            except:
                return None
            
            v1 = client.CoreV1Api()
            
            # Get basic cluster info
            nodes = v1.list_node()
            node_count = len(nodes.items)
            
            # Check specific namespaces
            namespace_data = {}
            target_namespaces = ["argocd", "vault", "istio-system", "monitoring", "airflow"]
            
            for ns in target_namespaces:
                try:
                    pods = v1.list_namespaced_pod(namespace=ns)
                    running_pods = len([p for p in pods.items if p.status.phase == "Running" and 
                                      all(cs.ready for cs in (p.status.container_statuses or []))])
                    total_pods = len(pods.items)
                    
                    namespace_data[ns] = {
                        "running": running_pods,
                        "total": total_pods
                    }
                except:
                    namespace_data[ns] = {"running": 0, "total": 0}
            
            # Get ALB hostname
            try:
                networking_v1 = client.NetworkingV1Api()
                ingress = networking_v1.read_namespaced_ingress(name="platform-alb", namespace="argocd")
                alb_hostname = ingress.status.load_balancer.ingress[0].hostname if ingress.status.load_balancer.ingress else None
            except:
                alb_hostname = None
            
            return {
                "nodes": node_count,
                "alb": alb_hostname,
                "namespace_data": namespace_data
            }
            
        except Exception as e:
            return None
    
    # Get real data
    k8s_data = get_k8s_data()
    
    if k8s_data:
        # Real metrics
        active_services = sum([1 for ns_data in k8s_data["namespace_data"].values() if ns_data["running"] > 0])
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Cluster Nodes", str(k8s_data["nodes"]))
        with col2:
            st.metric("ALB Status", "ACTIVE" if k8s_data["alb"] else "NOT FOUND")
        with col3:
            st.metric("Active Services", f"{active_services}/5")
        with col4:
            st.metric("Platform", "BASE v2.0")
        
        st.divider()
        st.markdown("### Platform Applications")
        
        base_url = f"http://{k8s_data['alb']}" if k8s_data["alb"] else "ALB_NOT_CONFIGURED"
        
        # ArgoCD
        argocd = k8s_data["namespace_data"]["argocd"]
        if argocd["running"] > 0:
            argocd_url = f"{base_url}/argocd"
            st.markdown(f"""
            <div class="app-tile" onclick="window.open('{argocd_url}', '_blank')">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0; color: #f0f6fc;">ArgoCD</h4>
                    <span class="status-active">ACTIVE</span>
                </div>
                <p>GitOps Continuous Deployment</p>
                <p><strong>Status:</strong> {argocd["running"]}/{argocd["total"]} pods running</p>
                <p style="font-family: monospace; color: #58a6ff;">{argocd_url}</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Streamlit button as backup
            if st.button("Open ArgoCD", key="argocd", use_container_width=True):
                st.markdown(f"**ArgoCD URL:** [{argocd_url}]({argocd_url})")
                st.success("Click the link above to open ArgoCD")
        
        # Vault
        vault = k8s_data["namespace_data"]["vault"]
        if vault["running"] > 0:
            vault_url = f"{base_url}/vault"
            st.markdown(f"""
            <div class="app-tile" onclick="window.open('{vault_url}', '_blank')">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0; color: #f0f6fc;">HashiCorp Vault</h4>
                    <span class="status-active">ACTIVE</span>
                </div>
                <p>Secrets Management</p>
                <p><strong>Status:</strong> {vault["running"]}/{vault["total"]} pods running</p>
                <p style="font-family: monospace; color: #58a6ff;">{vault_url}</p>
            </div>
            """, unsafe_allow_html=True)
            
            if st.button("Open Vault", key="vault", use_container_width=True):
                st.markdown(f"**Vault URL:** [{vault_url}]({vault_url})")
                st.success("Click the link above to open Vault")
        
        # Istio
        istio = k8s_data["namespace_data"]["istio-system"]
        if istio["running"] > 0:
            istio_url = f"{base_url}/kiali"
            st.markdown(f"""
            <div class="app-tile" onclick="window.open('{istio_url}', '_blank')">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0; color: #f0f6fc;">Istio Service Mesh</h4>
                    <span class="status-active">ACTIVE</span>
                </div>
                <p>Traffic Management & Security</p>
                <p><strong>Status:</strong> {istio["running"]}/{istio["total"]} pods running</p>
                <p style="font-family: monospace; color: #58a6ff;">{istio_url}</p>
            </div>
            """, unsafe_allow_html=True)
            
            if st.button("Open Kiali", key="kiali", use_container_width=True):
                st.markdown(f"**Kiali URL:** [{istio_url}]({istio_url})")
                st.success("Click the link above to open Kiali")
        
        # Show pending services
        for service_name, namespace in [("Monitoring", "monitoring"), ("Airflow", "airflow")]:
            ns_data = k8s_data["namespace_data"][namespace]
            if ns_data["running"] == 0:
                st.markdown(f"""
                <div class="app-tile" style="opacity: 0.6;">
                    <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                        <h4 style="margin: 0;">{service_name}</h4>
                        <span class="status-pending">NOT DEPLOYED</span>
                    </div>
                    <p>Deploy with: ./deploy-platform.sh {namespace.replace('monitoring', 'shared')}</p>
                </div>
                """, unsafe_allow_html=True)
        
        st.divider()
        st.caption(f"Updated: {datetime.now().strftime('%H:%M:%S UTC')} | {active_services}/5 services active")
        
    else:
        st.error("Cannot connect to Kubernetes API - running in limited mode")
        st.write("The dashboard needs to be deployed with proper RBAC permissions.")
    
    # Platform operations
    st.divider()
    st.markdown("### Platform Operations")
    
    op_col1, op_col2, op_col3 = st.columns(3)
    
    with op_col1:
        if st.button("Deploy Shared Services", use_container_width=True):
            st.code("./deploy-platform.sh shared")
    
    with op_col2:
        if st.button("Deploy Orchestration", use_container_width=True):
            st.code("./deploy-platform.sh orchestration")
    
    with op_col3:
        if st.button("Validate Platform", use_container_width=True):
            st.code("./deploy-platform.sh validate")