apiVersion: v1
kind: ConfigMap
metadata:
  name: platform-ui-config
  namespace: platform-ui
data:
  dashboard.py: |
    import streamlit as st
    from datetime import datetime
    
    st.set_page_config(
        page_title="BASE Platform Dashboard",
        page_icon="â–£",
        layout="wide"
    )
    
    st.markdown("""
    <style>
    .main > div {
        padding-top: 1rem;
    }
    .stApp {
        background-color: #1e1e1e;
        color: #ffffff;
    }
    .service-tile {
        background: #2d2d2d;
        border: 1px solid #404040;
        border-radius: 8px;
        padding: 20px;
        margin: 10px;
        color: #ffffff;
    }
    .metric-card {
        background: #262626;
        border: 1px solid #404040;
        border-radius: 6px;
        padding: 15px;
        text-align: center;
    }
    .status-healthy { color: #4ade80; }
    .status-pending { color: #fbbf24; }
    .status-error { color: #f87171; }
    </style>
    """, unsafe_allow_html=True)
    
    # Header
    st.title("BASE Platform Dashboard")
    st.markdown("**Enterprise Data Platform Management Console**")
    
    # Platform Metrics
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Platform Cluster", "ACTIVE")
        st.caption("base-app-layer-dev-platform")
    
    with col2:
        st.metric("Base Cluster", "ACTIVE") 
        st.caption("base-app-layer-dev-base")
    
    with col3:
        st.metric("Region", "us-east-1")
        st.caption("AWS Virginia")
    
    with col4:
        st.metric("Service Health", "4/8")
        st.caption("50% Operational")
    
    st.divider()
    
    # Service Status
    st.subheader("Platform Services")
    
    services = [
        {"name": "ArgoCD", "url": "argocd.base-app-layer.dev", "status": "HEALTHY", "namespace": "argocd", "description": "GitOps Continuous Deployment"},
        {"name": "Vault", "url": "vault.base-app-layer.dev", "status": "HEALTHY", "namespace": "vault", "description": "Secrets Management"},
        {"name": "Istio", "url": "istio.base-app-layer.dev", "status": "HEALTHY", "namespace": "istio-system", "description": "Service Mesh"},
        {"name": "AWS LB Controller", "url": "platform.base-app-layer.dev", "status": "HEALTHY", "namespace": "kube-system", "description": "Application Load Balancer"},
        {"name": "Airflow", "url": "airflow.base-app-layer.dev", "status": "PENDING", "namespace": "airflow", "description": "Workflow Orchestration"},
        {"name": "MLflow", "url": "mlflow.base-app-layer.dev", "status": "PENDING", "namespace": "mlflow", "description": "ML Lifecycle Management"},
        {"name": "Grafana", "url": "grafana.base-app-layer.dev", "status": "PENDING", "namespace": "monitoring", "description": "Observability Dashboard"},
        {"name": "Prometheus", "url": "prometheus.base-app-layer.dev", "status": "PENDING", "namespace": "monitoring", "description": "Metrics Collection"}
    ]
    
    # Create service grid
    cols = st.columns(2)
    for idx, service in enumerate(services):
        with cols[idx % 2]:
            status_class = "status-healthy" if service["status"] == "HEALTHY" else "status-pending"
            
            st.markdown(f"""
            <div class="service-tile">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <h4 style="margin: 0; color: #ffffff;">{service['name']}</h4>
                        <p style="margin: 5px 0; color: #a0a0a0; font-size: 14px;">{service['description']}</p>
                        <p style="margin: 5px 0; color: #808080; font-size: 12px;">Namespace: {service['namespace']}</p>
                    </div>
                    <div style="text-align: right;">
                        <div class="{status_class}" style="font-weight: bold;">{service['status']}</div>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            if st.button(f"Access {service['name']}", key=f"access_{service['name']}"):
                st.code(f"http://{service['url']}")
    
    st.divider()
    
    # Deployment Status
    st.subheader("Deployment Waves")
    
    wave_col1, wave_col2, wave_col3, wave_col4 = st.columns(4)
    
    with wave_col1:
        st.success("Wave 0: Core")
        st.caption("ArgoCD - DEPLOYED")
    
    with wave_col2:
        st.success("Wave 1: Infrastructure") 
        st.caption("Vault, ALB, Istio - DEPLOYED")
    
    with wave_col3:
        st.warning("Wave 2: Shared")
        st.caption("Monitoring, Logging - PENDING")
    
    with wave_col4:
        st.warning("Wave 3: Orchestration")
        st.caption("Airflow, MLflow - PENDING")
    
    st.divider()
    
    # Operations
    st.subheader("Operations")
    
    op_col1, op_col2, op_col3, op_col4 = st.columns(4)
    
    with op_col1:
        if st.button("Refresh Status", use_container_width=True):
            st.experimental_rerun()
    
    with op_col2:
        if st.button("Deploy Shared Services", use_container_width=True):
            st.code("./deploy-platform.sh shared")
    
    with op_col3:
        if st.button("Deploy Orchestration", use_container_width=True):
            st.code("./deploy-platform.sh orchestration")
    
    with op_col4:
        if st.button("Validate Platform", use_container_width=True):
            st.code("./deploy-platform.sh validate")
    
    # System Information
    st.divider()
    
    info_col1, info_col2, info_col3 = st.columns(3)
    
    with info_col1:
        st.text("Environment: Development")
        st.text("Deployment: GitOps")
        st.text("Infrastructure: Terraform")
    
    with info_col2:
        st.text("Region: us-east-1")
        st.text("Provider: AWS")
        st.text("Orchestration: Kubernetes")
    
    with info_col3:
        st.text("Security: Vault + IRSA")
        st.text("Load Balancing: ALB")
        st.text("Service Mesh: Istio")
    
    # Footer
    st.divider()
    st.caption(f"Last Updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')} | BASE Platform Dashboard v2.0")