apiVersion: v1
kind: ConfigMap
metadata:
  name: platform-ui-config
  namespace: argocd
data:
  dashboard.py: |
    import streamlit as st
    import subprocess
    import json
    from datetime import datetime
    
    st.set_page_config(page_title="BASE Platform", layout="wide")
    
    st.markdown("""
    <style>
    .stApp { background: #0a0e1a; color: #e4e7eb; }
    .app-tile { background: #161b22; border: 1px solid #30363d; border-radius: 6px; padding: 1.5rem; margin: 1rem 0; }
    .app-tile:hover { border-color: #58a6ff; cursor: pointer; }
    .status-active { background: #238636; color: white; padding: 0.3rem 0.8rem; border-radius: 4px; font-size: 0.8rem; }
    .status-pending { background: #9a6700; color: white; padding: 0.3rem 0.8rem; border-radius: 4px; font-size: 0.8rem; }
    .stButton > button { background-color: #238636 !important; color: white !important; }
    </style>
    """, unsafe_allow_html=True)
    
    st.title("BASE Platform Console")
    st.markdown("**Real-time Enterprise Data Platform Status**")
    
    # Get real cluster info
    def get_cluster_info():
        try:
            nodes = subprocess.run(['kubectl', 'get', 'nodes', '--no-headers'], capture_output=True, text=True)
            node_count = len(nodes.stdout.strip().split('\n')) if nodes.stdout.strip() else 0
            
            context = subprocess.run(['kubectl', 'config', 'current-context'], capture_output=True, text=True)
            current_context = context.stdout.strip() if context.stdout else "unknown"
            
            return node_count, current_context
        except:
            return 0, "unknown"
    
    # Get real namespace info
    def get_namespace_info(namespace):
        try:
            pods = subprocess.run(['kubectl', 'get', 'pods', '-n', namespace, '--no-headers'], capture_output=True, text=True)
            if pods.returncode != 0:
                return {"exists": False, "pods": 0, "running": 0, "services": 0}
            
            pod_lines = pods.stdout.strip().split('\n') if pods.stdout.strip() else []
            running_pods = len([line for line in pod_lines if 'Running' in line and '1/1' in line])
            
            services = subprocess.run(['kubectl', 'get', 'svc', '-n', namespace, '--no-headers'], capture_output=True, text=True)
            service_count = len(services.stdout.strip().split('\n')) if services.stdout.strip() else 0
            
            return {
                "exists": True,
                "pods": len(pod_lines),
                "running": running_pods,
                "services": service_count
            }
        except:
            return {"exists": False, "pods": 0, "running": 0, "services": 0}
    
    # Get real ALB info
    def get_alb_info():
        try:
            ingress = subprocess.run(['kubectl', 'get', 'ingress', 'platform-alb', '-n', 'argocd', '-o', 'jsonpath={.status.loadBalancer.ingress[0].hostname}'], capture_output=True, text=True)
            return ingress.stdout.strip() if ingress.stdout.strip() else None
        except:
            return None
    
    # Real cluster metrics
    node_count, cluster_context = get_cluster_info()
    alb_hostname = get_alb_info()
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("Cluster Nodes", str(node_count), "EKS Managed")
    with col2:
        st.metric("Current Context", cluster_context.split('/')[-1] if '/' in cluster_context else cluster_context)
    with col3:
        if alb_hostname:
            st.metric("Load Balancer", "ACTIVE", alb_hostname[:20] + "...")
        else:
            st.metric("Load Balancer", "NOT FOUND")
    with col4:
        # Count active namespaces
        try:
            namespaces = subprocess.run(['kubectl', 'get', 'namespaces', '--no-headers'], capture_output=True, text=True)
            ns_count = len(namespaces.stdout.strip().split('\n')) if namespaces.stdout.strip() else 0
            st.metric("Namespaces", str(ns_count))
        except:
            st.metric("Namespaces", "Unknown")
    
    st.divider()
    
    # Real application status
    st.markdown("### Platform Applications")
    
    # Check real services
    argocd_info = get_namespace_info("argocd")
    vault_info = get_namespace_info("vault") 
    istio_info = get_namespace_info("istio-system")
    monitoring_info = get_namespace_info("monitoring")
    airflow_info = get_namespace_info("airflow")
    
    base_url = f"http://{alb_hostname}" if alb_hostname else "ALB_NOT_CONFIGURED"
    
    # ArgoCD
    if argocd_info["running"] > 0:
        st.markdown(f"""
        <div class="app-tile" onclick="window.open('{base_url}/argocd', '_blank')">
            <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                <h4 style="margin: 0; color: #f0f6fc;">ArgoCD</h4>
                <span class="status-active">ACTIVE</span>
            </div>
            <p>GitOps Continuous Deployment</p>
            <p><strong>Status:</strong> {argocd_info["running"]}/{argocd_info["pods"]} pods running, {argocd_info["services"]} services</p>
            <p style="font-family: monospace; color: #58a6ff;">{base_url}/argocd</p>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown("""
        <div class="app-tile" style="opacity: 0.6;">
            <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                <h4 style="margin: 0;">ArgoCD</h4>
                <span class="status-pending">NOT RUNNING</span>
            </div>
            <p>GitOps Continuous Deployment</p>
            <p><strong>Status:</strong> No running pods found in argocd namespace</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Vault
    if vault_info["running"] > 0:
        st.markdown(f"""
        <div class="app-tile" onclick="window.open('{base_url}/vault', '_blank')">
            <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                <h4 style="margin: 0; color: #f0f6fc;">HashiCorp Vault</h4>
                <span class="status-active">ACTIVE</span>
            </div>
            <p>Secrets Management</p>
            <p><strong>Status:</strong> {vault_info["running"]}/{vault_info["pods"]} pods running, {vault_info["services"]} services</p>
            <p style="font-family: monospace; color: #58a6ff;">{base_url}/vault</p>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown("""
        <div class="app-tile" style="opacity: 0.6;">
            <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                <h4 style="margin: 0;">HashiCorp Vault</h4>
                <span class="status-pending">NOT RUNNING</span>
            </div>
            <p>Secrets Management</p>
            <p><strong>Status:</strong> No running pods found in vault namespace</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Istio
    if istio_info["running"] > 0:
        st.markdown(f"""
        <div class="app-tile" onclick="window.open('{base_url}/kiali', '_blank')">
            <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                <h4 style="margin: 0; color: #f0f6fc;">Istio Service Mesh</h4>
                <span class="status-active">ACTIVE</span>
            </div>
            <p>Traffic Management & Security</p>
            <p><strong>Status:</strong> {istio_info["running"]}/{istio_info["pods"]} pods running, {istio_info["services"]} services</p>
            <p style="font-family: monospace; color: #58a6ff;">{base_url}/kiali</p>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown("""
        <div class="app-tile" style="opacity: 0.6;">
            <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                <h4 style="margin: 0;">Istio Service Mesh</h4>
                <span class="status-pending">NOT RUNNING</span>
            </div>
            <p>Traffic Management & Security</p>
            <p><strong>Status:</strong> No running pods found in istio-system namespace</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Monitoring stack
    if monitoring_info["running"] > 0:
        st.markdown(f"""
        <div class="app-tile" onclick="window.open('{base_url}/grafana', '_blank')">
            <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                <h4 style="margin: 0; color: #f0f6fc;">Monitoring Stack</h4>
                <span class="status-active">ACTIVE</span>
            </div>
            <p>Grafana, Prometheus, AlertManager</p>
            <p><strong>Status:</strong> {monitoring_info["running"]}/{monitoring_info["pods"]} pods running, {monitoring_info["services"]} services</p>
            <p style="font-family: monospace; color: #58a6ff;">{base_url}/grafana</p>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown("""
        <div class="app-tile" style="opacity: 0.6;">
            <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                <h4 style="margin: 0;">Monitoring Stack</h4>
                <span class="status-pending">NOT DEPLOYED</span>
            </div>
            <p>Grafana, Prometheus, AlertManager</p>
            <p><strong>Deploy:</strong> ./deploy-platform.sh shared</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Airflow
    if airflow_info["running"] > 0:
        st.markdown(f"""
        <div class="app-tile" onclick="window.open('{base_url}/airflow', '_blank')">
            <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                <h4 style="margin: 0; color: #f0f6fc;">Apache Airflow</h4>
                <span class="status-active">ACTIVE</span>
            </div>
            <p>Workflow Orchestration</p>
            <p><strong>Status:</strong> {airflow_info["running"]}/{airflow_info["pods"]} pods running, {airflow_info["services"]} services</p>
            <p style="font-family: monospace; color: #58a6ff;">{base_url}/airflow</p>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown("""
        <div class="app-tile" style="opacity: 0.6;">
            <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                <h4 style="margin: 0;">Apache Airflow</h4>
                <span class="status-pending">NOT DEPLOYED</span>
            </div>
            <p>Workflow Orchestration</p>
            <p><strong>Deploy:</strong> ./deploy-platform.sh orchestration</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.divider()
    
    # Real deployment waves status
    st.markdown("### Real Deployment Status")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if argocd_info["running"] > 0:
            st.success("**Wave 0: Core**")
            st.text(f"ArgoCD: {argocd_info['running']} running")
            st.text("✓ DEPLOYED")
        else:
            st.error("**Wave 0: Core**")
            st.text("ArgoCD: Not running")
            st.text("✗ FAILED")
    
    with col2:
        vault_ok = vault_info["running"] > 0
        istio_ok = istio_info["running"] > 0
        if vault_ok and istio_ok:
            st.success("**Wave 1: Infrastructure**")
            st.text(f"Vault: {vault_info['running']} running")
            st.text(f"Istio: {istio_info['running']} running")
            st.text("✓ DEPLOYED")
        elif vault_ok or istio_ok:
            st.warning("**Wave 1: Infrastructure**")
            st.text(f"Vault: {vault_info['running']} running")
            st.text(f"Istio: {istio_info['running']} running")
            st.text("◐ PARTIAL")
        else:
            st.error("**Wave 1: Infrastructure**")
            st.text("Vault: Not running")
            st.text("Istio: Not running")
            st.text("✗ FAILED")
    
    with col3:
        if monitoring_info["running"] > 0:
            st.success("**Wave 2: Shared**")
            st.text(f"Monitoring: {monitoring_info['running']} running")
            st.text("✓ DEPLOYED")
        else:
            st.warning("**Wave 2: Shared**")
            st.text("Monitoring: Not deployed")
            st.text("○ PENDING")
    
    with col4:
        if airflow_info["running"] > 0:
            st.success("**Wave 3: Orchestration**")
            st.text(f"Airflow: {airflow_info['running']} running")
            st.text("✓ DEPLOYED")
        else:
            st.warning("**Wave 3: Orchestration**")
            st.text("Airflow: Not deployed")
            st.text("○ PENDING")
    
    # Platform operations
    st.divider()
    st.markdown("### Platform Operations")
    
    op_col1, op_col2, op_col3 = st.columns(3)
    
    with op_col1:
        if st.button("Deploy Shared Services", use_container_width=True):
            st.code("./deploy-platform.sh shared")
            st.info("Deploys Prometheus, Grafana, ELK stack to monitoring namespace")
    
    with op_col2:
        if st.button("Deploy Orchestration", use_container_width=True):
            st.code("./deploy-platform.sh orchestration")
            st.info("Deploys Airflow, MLflow to airflow namespace")
    
    with op_col3:
        if st.button("Validate Platform", use_container_width=True):
            st.code("./deploy-platform.sh validate")
            st.info("Runs health checks on all deployed services")
    
    # Real-time footer
    st.divider()
    active_services = sum([
        1 if argocd_info["running"] > 0 else 0,
        1 if vault_info["running"] > 0 else 0,
        1 if istio_info["running"] > 0 else 0,
        1 if monitoring_info["running"] > 0 else 0,
        1 if airflow_info["running"] > 0 else 0
    ])
    
    st.caption(f"Updated: {datetime.now().strftime('%H:%M:%S UTC')} | {active_services}/5 services running | Cluster: {node_count} nodes")