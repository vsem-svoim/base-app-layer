apiVersion: apps/v1
kind: Deployment
metadata:
  name: platform-ui-dashboard
  namespace: platform-ui
  labels:
    app: platform-ui-dashboard
    component: dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: platform-ui-dashboard
  template:
    metadata:
      labels:
        app: platform-ui-dashboard
        component: dashboard
    spec:
      nodeSelector:
        eks.amazonaws.com/nodegroup: platform_system
      containers:
      - name: dashboard
        image: python:3.11-slim
        ports:
        - containerPort: 8501
        command: ["/bin/bash"]
        args: ["-c", "pip install streamlit requests kubernetes flask && python /app/health_server.py & ~/.local/bin/streamlit run /app/dashboard.py --server.port=8501 --server.address=0.0.0.0 --server.enableXsrfProtection=false --server.enableCORS=false"]
        volumeMounts:
        - name: dashboard-config
          mountPath: /app
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        env:
        - name: STREAMLIT_SERVER_HEADLESS
          value: "true"
        - name: STREAMLIT_SERVER_ENABLE_CORS
          value: "false"
      volumes:
      - name: dashboard-config
        configMap:
          name: platform-ui-streamlit-config
---
apiVersion: v1
kind: Service
metadata:
  name: platform-ui
  namespace: platform-ui
  labels:
    app: platform-ui-dashboard
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8501
    protocol: TCP
    name: http
  selector:
    app: platform-ui-dashboard
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: platform-ui-streamlit-config
  namespace: platform-ui
data:
  health_server.py: |
    from flask import Flask
    import threading
    import time
    
    app = Flask(__name__)
    
    @app.route('/')
    @app.route('/health')
    @app.route('/healthz')
    def health():
        return "OK", 200
    
    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=80, debug=False)
  
  dashboard.py: |
    import streamlit as st
    import requests
    import time
    from datetime import datetime
    
    # Configure Streamlit page
    st.set_page_config(
        page_title="BASE Platform Dashboard",
        page_icon="üöÄ",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Custom CSS for better styling
    st.markdown("""
    <style>
    .main > div {
        padding-top: 1rem;
    }
    .stApp {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    .service-tile {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 15px;
        padding: 20px;
        margin: 10px;
        text-align: center;
        border: 1px solid rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
    }
    .metric-container {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        padding: 15px;
        margin: 5px;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Platform services configuration
    SERVICES = {
        "ArgoCD": {
            "description": "GitOps Continuous Deployment",
            "url": "http://argocd.base-app-layer.dev",
            "namespace": "argocd",
            "icon": "üöÄ",
            "status": "healthy"
        },
        "Vault": {
            "description": "Secrets Management", 
            "url": "http://vault.base-app-layer.dev",
            "namespace": "vault",
            "icon": "üîê",
            "status": "healthy"
        },
        "Istio": {
            "description": "Service Mesh",
            "url": "http://istio.base-app-layer.dev",
            "namespace": "istio-system",
            "icon": "üï∏Ô∏è",
            "status": "healthy"
        },
        "AWS Load Balancer": {
            "description": "Application Load Balancer",
            "url": "http://platform.base-app-layer.dev",
            "namespace": "kube-system",
            "icon": "‚öñÔ∏è",
            "status": "healthy"
        },
        "Airflow": {
            "description": "Workflow Orchestration",
            "url": "http://airflow.base-app-layer.dev",
            "namespace": "airflow",
            "icon": "üå™Ô∏è", 
            "status": "pending"
        },
        "MLflow": {
            "description": "ML Lifecycle Management",
            "url": "http://mlflow.base-app-layer.dev",
            "namespace": "mlflow", 
            "icon": "üß†",
            "status": "pending"
        },
        "Grafana": {
            "description": "Monitoring & Observability",
            "url": "http://grafana.base-app-layer.dev",
            "namespace": "monitoring",
            "icon": "üìä",
            "status": "pending"
        },
        "Prometheus": {
            "description": "Metrics Collection",
            "url": "http://prometheus.base-app-layer.dev",
            "namespace": "monitoring",
            "icon": "üìà",
            "status": "pending"
        }
    }
    
    def get_status_color(status):
        if status == "healthy":
            return "üü¢"
        elif status == "pending":
            return "üü°"
        else:
            return "üî¥"
    
    def main():
        # Header
        st.markdown("""
        <div style="text-align: center; color: white; margin-bottom: 2rem;">
            <h1>üöÄ BASE Platform Dashboard</h1>
            <p style="font-size: 1.2rem; opacity: 0.8;">Unified access to your enterprise data platform services</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Platform Status Overview
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="üåü Platform Cluster", 
                value="Active",
                delta="base-app-layer-dev-platform"
            )
        
        with col2:
            st.metric(
                label="üíæ Base Cluster", 
                value="Active",
                delta="base-app-layer-dev-base"
            )
        
        with col3:
            st.metric(
                label="‚òÅÔ∏è AWS Region", 
                value="us-east-1",
                delta="Virginia"
            )
        
        with col4:
            healthy_count = len([s for s in SERVICES.values() if s["status"] == "healthy"])
            total_count = len(SERVICES)
            st.metric(
                label="üîã Services Health", 
                value=f"{healthy_count}/{total_count}",
                delta="Operational"
            )
        
        st.markdown("---")
        
        # Services Grid
        st.markdown("### üéõÔ∏è Platform Services")
        
        # Create 3-column layout for service tiles
        cols = st.columns(3)
        
        for idx, (service_name, service_info) in enumerate(SERVICES.items()):
            col_idx = idx % 3
            
            with cols[col_idx]:
                status_indicator = get_status_color(service_info["status"])
                
                # Create service tile
                st.markdown(f"""
                <div class="service-tile">
                    <h3>{service_info["icon"]} {service_name}</h3>
                    <p style="color: #ccc; margin: 10px 0;">{service_info["description"]}</p>
                    <p style="font-size: 0.9rem; color: #999;">Namespace: {service_info["namespace"]}</p>
                    <div style="margin: 15px 0;">
                        Status: {status_indicator} {service_info["status"].title()}
                    </div>
                </div>
                """, unsafe_allow_html=True)
                
                # Add button for each service
                if st.button(f"Open {service_name}", key=f"btn_{service_name}", use_container_width=True):
                    st.write(f"üîó Opening {service_name}")
                    st.markdown(f"**URL:** [{service_info['url']}]({service_info['url']})")
                    st.success(f"Click the URL above to access {service_name}")
        
        st.markdown("---")
        
        # Deployment Information
        st.markdown("### ‚ÑπÔ∏è Platform Information")
        
        info_col1, info_col2, info_col3 = st.columns(3)
        
        with info_col1:
            st.info("""
            **Environment**: Development  
            **Deployment**: GitOps via ArgoCD  
            **Infrastructure**: Terraform + EKS
            """)
        
        with info_col2:
            st.info("""
            **Region**: us-east-1  
            **Availability**: Multi-AZ  
            **Networking**: VPC + Private Subnets
            """)
        
        with info_col3:
            st.info("""
            **Security**: Vault + IRSA  
            **Load Balancing**: AWS ALB  
            **Service Mesh**: Istio
            """)
        
        # Deployment Status
        st.markdown("### üìã Current Deployment Waves")
        
        wave_col1, wave_col2, wave_col3, wave_col4 = st.columns(4)
        
        with wave_col1:
            st.success("**Wave 0: Core** ‚úÖ  \nArgoCD Deployed")
        
        with wave_col2:
            st.success("**Wave 1: Infrastructure** ‚úÖ  \nVault, ALB, Istio")
        
        with wave_col3:
            st.warning("**Wave 2: Shared** ‚è≥  \nMonitoring, Logging")
        
        with wave_col4:
            st.warning("**Wave 3: Orchestration** ‚è≥  \nAirflow, MLflow")
        
        # Quick Actions
        st.markdown("### ‚ö° Quick Actions")
        
        action_col1, action_col2, action_col3, action_col4 = st.columns(4)
        
        with action_col1:
            if st.button("üîÑ Refresh Status", use_container_width=True):
                st.experimental_rerun()
        
        with action_col2:
            if st.button("üìã View Logs", use_container_width=True):
                st.code("kubectl logs -f deployment/platform-ui-dashboard -n platform-ui")
        
        with action_col3:
            if st.button("üìä Metrics", use_container_width=True):
                st.write("üìà Metrics will be available after Grafana deployment")
        
        with action_col4:
            if st.button("‚öôÔ∏è Deploy Next Wave", use_container_width=True):
                st.code("./deploy-platform.sh shared")
                st.write("Run this command to deploy shared services (monitoring)")
        
        # Footer
        st.markdown("---")
        st.markdown(
            f"<div style='text-align: center; color: #ccc; font-size: 0.9rem;'>"
            f"Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}<br>"
            f"BASE Platform Dashboard v2.0 | Powered by Streamlit üéà"
            f"</div>", 
            unsafe_allow_html=True
        )
    
    if __name__ == "__main__":
        main()
---
apiVersion: v1
kind: Namespace
metadata:
  name: platform-ui
  labels:
    name: platform-ui
    component: dashboard