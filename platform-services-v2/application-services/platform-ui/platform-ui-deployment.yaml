apiVersion: apps/v1
kind: Deployment
metadata:
  name: platform-ui
  namespace: argocd
spec:
  replicas: 1
  selector:
    matchLabels:
      app: platform-ui
  template:
    metadata:
      labels:
        app: platform-ui
    spec:
      serviceAccountName: platform-ui-sa
      nodeSelector:
        eks.amazonaws.com/nodegroup: platform_system
      containers:
      - name: streamlit
        image: python:3.11-slim
        ports:
        - containerPort: 8501
        command: ["/bin/bash"]
        args: ["-c", "pip install streamlit kubernetes flask && export PATH=$PATH:/root/.local/bin && /root/.local/bin/streamlit run /app/dashboard.py --server.port=8501 --server.address=0.0.0.0"]
        volumeMounts:
        - name: dashboard-config
          mountPath: /app
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /
            port: 8501
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 8501
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: dashboard-config
        configMap:
          name: platform-ui-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: platform-ui-config
  namespace: argocd
data:
  dashboard.py: |
    import streamlit as st
    from datetime import datetime
    import json
    
    st.set_page_config(page_title="BASE Platform Console", layout="wide")
    
    # Professional CSS styling
    st.markdown("""
    <style>
    .stApp { background: #0e1117; color: #fafafa; font-family: 'Source Code Pro', monospace; }
    .main-header { 
        background: linear-gradient(90deg, #1f2937 0%, #374151 100%); 
        padding: 2rem; margin: -1rem -1rem 2rem -1rem; border-radius: 8px;
        border-left: 4px solid #3b82f6;
    }
    .service-card { 
        background: #1f2937; border: 1px solid #374151; border-radius: 8px; 
        padding: 1.5rem; margin: 1rem 0; transition: all 0.3s ease;
        cursor: pointer; position: relative;
    }
    .service-card:hover { 
        border-color: #3b82f6; transform: translateY(-2px); 
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.15);
    }
    .service-card.active { border-color: #10b981; background: #064e3b; }
    .service-card.pending { border-color: #f59e0b; background: #451a03; }
    .service-card.failed { border-color: #ef4444; background: #450a0a; }
    
    .status-badge {
        position: absolute; top: 1rem; right: 1rem;
        padding: 0.25rem 0.75rem; border-radius: 4px; font-size: 0.75rem; font-weight: 600;
    }
    .status-active { background: #10b981; color: white; }
    .status-pending { background: #f59e0b; color: white; }
    .status-failed { background: #ef4444; color: white; }
    .status-not-deployed { background: #6b7280; color: white; }
    
    .service-url { 
        font-family: 'Fira Code', monospace; color: #60a5fa; font-size: 0.875rem; 
        background: #1e293b; padding: 0.5rem; border-radius: 4px; margin-top: 1rem;
    }
    .deployment-stage {
        background: #111827; border: 1px solid #374151; border-radius: 6px;
        padding: 1rem; margin: 0.5rem 0;
    }
    .stage-complete { border-color: #10b981; }
    .stage-partial { border-color: #f59e0b; }
    .stage-pending { border-color: #6b7280; }
    
    .stButton > button { 
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%) !important;
        color: white !important; border: none !important; border-radius: 6px !important;
        padding: 0.5rem 1rem !important; font-weight: 600 !important;
        transition: all 0.3s ease !important;
    }
    .stButton > button:hover { 
        background: linear-gradient(135deg, #1d4ed8 0%, #1e40af 100%) !important;
        transform: translateY(-1px) !important;
    }
    .stMetric { background: #1f2937; padding: 1rem; border-radius: 8px; border: 1px solid #374151; }
    </style>
    """, unsafe_allow_html=True)
    
    # Header
    st.markdown("""
    <div class="main-header">
        <h1 style="margin: 0; color: #fafafa;">BASE Platform Console</h1>
        <p style="margin: 0.5rem 0 0 0; color: #d1d5db;">Enterprise Data Platform • Kubernetes Integration • Real-time Monitoring</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Service definitions with ALB routing
    def get_service_definitions():
        return {
            "argocd": {
                "name": "ArgoCD",
                "description": "GitOps Continuous Deployment Platform",
                "namespace": "argocd",
                "internal_service": "argocd-server",
                "internal_port": 80,
                "alb_path": "/argocd",
                "deploy_command": "./deploy-platform.sh core",
                "category": "Core Infrastructure"
            },
            "vault": {
                "name": "HashiCorp Vault", 
                "description": "Secrets Management & Encryption",
                "namespace": "vault",
                "internal_service": "vault",
                "internal_port": 8200,
                "alb_path": "/vault",
                "deploy_command": "./deploy-platform.sh core",
                "category": "Security"
            },
            "istio-system": {
                "name": "Istio Service Mesh",
                "description": "Traffic Management & Security Policies",
                "namespace": "istio-system", 
                "internal_service": "kiali",
                "internal_port": 20001,
                "alb_path": "/kiali",
                "deploy_command": "./deploy-platform.sh core",
                "category": "Network Infrastructure"
            },
            "monitoring": {
                "name": "Grafana Dashboard",
                "description": "Metrics, Monitoring & Alerting",
                "namespace": "monitoring",
                "internal_service": "grafana", 
                "internal_port": 80,
                "alb_path": "/grafana",
                "deploy_command": "./deploy-platform.sh shared",
                "category": "Observability"
            },
            "airflow": {
                "name": "Apache Airflow",
                "description": "Workflow Orchestration & Data Pipelines", 
                "namespace": "airflow",
                "internal_service": "airflow-webserver",
                "internal_port": 8080,
                "alb_path": "/airflow",
                "deploy_command": "./deploy-platform.sh orchestration", 
                "category": "Data Processing"
            }
        }
    
    # Advanced Kubernetes API integration
    def get_k8s_data():
        try:
            from kubernetes import client, config
            
            try:
                config.load_incluster_config()
            except:
                config.load_kube_config()
            
            v1 = client.CoreV1Api()
            
            # Get basic cluster info
            nodes = v1.list_node()
            node_count = len(nodes.items)
            
            namespaces = v1.list_namespace()
            ns_count = len(namespaces.items)
            
            # Check specific namespaces
            namespace_data = {}
            target_namespaces = ["argocd", "vault", "istio-system", "monitoring", "airflow"]
            
            for ns in target_namespaces:
                try:
                    pods = v1.list_namespaced_pod(namespace=ns)
                    running_pods = len([p for p in pods.items if p.status.phase == "Running" and 
                                      all(cs.ready for cs in (p.status.container_statuses or []))])
                    total_pods = len(pods.items)
                    
                    services = v1.list_namespaced_service(namespace=ns)
                    service_count = len(services.items)
                    
                    namespace_data[ns] = {
                        "exists": True,
                        "running": running_pods,
                        "total": total_pods,
                        "services": service_count
                    }
                except:
                    namespace_data[ns] = {"exists": False, "running": 0, "total": 0, "services": 0}
            
            # Get ALB hostname
            try:
                networking_v1 = client.NetworkingV1Api()
                ingress = networking_v1.read_namespaced_ingress(name="platform-alb", namespace="argocd")
                alb_hostname = ingress.status.load_balancer.ingress[0].hostname if ingress.status.load_balancer.ingress else None
            except:
                alb_hostname = None
            
            return {
                "nodes": node_count,
                "namespaces": ns_count,
                "alb": alb_hostname,
                "namespace_data": namespace_data
            }
            
        except Exception as e:
            st.error(f"Kubernetes API Error: {str(e)}")
            return None
    
    # Get real data
    k8s_data = get_k8s_data()
    
    if k8s_data:
        # Real metrics
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Cluster Nodes", str(k8s_data["nodes"]), "EKS Managed")
        with col2:
            st.metric("Namespaces", str(k8s_data["namespaces"]), "Active")
        with col3:
            if k8s_data["alb"]:
                st.metric("Load Balancer", "ACTIVE", k8s_data["alb"][:25] + "...")
            else:
                st.metric("Load Balancer", "NOT FOUND")
        with col4:
            active_services = sum([1 for ns_data in k8s_data["namespace_data"].values() if ns_data["running"] > 0])
            st.metric("Active Services", f"{active_services}/5", f"{int(active_services/5*100)}% operational")
        
        st.divider()
        
        # Real application status with clickable tiles
        st.markdown("### Platform Applications")
        
        # ArgoCD
        argocd = k8s_data["namespace_data"]["argocd"]
        if argocd["running"] > 0:
            st.markdown(f"""
            <div class="app-tile">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0; color: #f0f6fc;">ArgoCD</h4>
                    <span class="status-active">ACTIVE</span>
                </div>
                <p>GitOps Continuous Deployment Platform</p>
                <p><strong>Status:</strong> {argocd["running"]}/{argocd["total"]} pods running, {argocd["services"]} services</p>
                <p style="font-family: monospace; color: #58a6ff; margin-top: 1rem;">Internal: argocd-server.argocd.svc.cluster.local:80</p>
            </div>
            """, unsafe_allow_html=True)
            
            if st.button("Port-forward ArgoCD", key="argocd_btn", use_container_width=True):
                st.code("kubectl port-forward -n argocd svc/argocd-server 8080:80")
                st.success("Then access: http://localhost:8080")
        else:
            st.markdown(f"""
            <div class="app-tile" style="opacity: 0.6;">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0;">ArgoCD</h4>
                    <span class="status-pending">NOT RUNNING</span>
                </div>
                <p>GitOps Continuous Deployment Platform</p>
                <p><strong>Status:</strong> {argocd["total"]} pods found, {argocd["running"]} running in argocd namespace</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Vault
        vault = k8s_data["namespace_data"]["vault"]
        if vault["running"] > 0:
            st.markdown(f"""
            <div class="app-tile">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0; color: #f0f6fc;">HashiCorp Vault</h4>
                    <span class="status-active">ACTIVE</span>
                </div>
                <p>Secrets Management System</p>
                <p><strong>Status:</strong> {vault["running"]}/{vault["total"]} pods running, {vault["services"]} services</p>
                <p style="font-family: monospace; color: #58a6ff; margin-top: 1rem;">Internal: vault.vault.svc.cluster.local:8200</p>
            </div>
            """, unsafe_allow_html=True)
            
            if st.button("Port-forward Vault", key="vault_btn", use_container_width=True):
                st.code("kubectl port-forward -n vault svc/vault 8200:8200")
                st.success("Then access: http://localhost:8200")
        else:
            st.markdown(f"""
            <div class="app-tile" style="opacity: 0.6;">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0;">HashiCorp Vault</h4>
                    <span class="status-pending">NOT RUNNING</span>
                </div>
                <p>Secrets Management System</p>
                <p><strong>Status:</strong> No running pods found in vault namespace</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Istio
        istio = k8s_data["namespace_data"]["istio-system"]
        if istio["running"] > 0:
            st.markdown(f"""
            <div class="app-tile">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0; color: #f0f6fc;">Istio Service Mesh</h4>
                    <span class="status-active">ACTIVE</span>
                </div>
                <p>Traffic Management & Security Layer</p>
                <p><strong>Status:</strong> {istio["running"]}/{istio["total"]} pods running, {istio["services"]} services</p>
                <p style="font-family: monospace; color: #58a6ff; margin-top: 1rem;">Internal: kiali.istio-system.svc.cluster.local:20001</p>
            </div>
            """, unsafe_allow_html=True)
            
            if st.button("Port-forward Kiali", key="istio_btn", use_container_width=True):
                st.code("kubectl port-forward -n istio-system svc/kiali 20001:20001")
                st.success("Then access: http://localhost:20001")
        else:
            st.markdown(f"""
            <div class="app-tile" style="opacity: 0.6;">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0;">Istio Service Mesh</h4>
                    <span class="status-pending">NOT RUNNING</span>
                </div>
                <p>Traffic Management & Security Layer</p>
                <p><strong>Status:</strong> No running pods found in istio-system namespace</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Monitoring
        monitoring = k8s_data["namespace_data"]["monitoring"]
        if monitoring["running"] > 0:
            st.markdown(f"""
            <div class="app-tile">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0; color: #f0f6fc;">Monitoring Stack</h4>
                    <span class="status-active">ACTIVE</span>
                </div>
                <p>Grafana, Prometheus, AlertManager</p>
                <p><strong>Status:</strong> {monitoring["running"]}/{monitoring["total"]} pods running, {monitoring["services"]} services</p>
                <p style="font-family: monospace; color: #58a6ff; margin-top: 1rem;">Internal: grafana.monitoring.svc.cluster.local:80</p>
            </div>
            """, unsafe_allow_html=True)
            
            if st.button("Port-forward Grafana", key="monitoring_btn", use_container_width=True):
                st.code("kubectl port-forward -n monitoring svc/grafana 3000:80")
                st.success("Then access: http://localhost:3000")
        else:
            st.markdown("""
            <div class="app-tile" style="opacity: 0.6;">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0;">Monitoring Stack</h4>
                    <span class="status-pending">NOT DEPLOYED</span>
                </div>
                <p>Grafana, Prometheus, AlertManager</p>
                <p><strong>Deploy:</strong> ./deploy-platform.sh shared</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Airflow
        airflow = k8s_data["namespace_data"]["airflow"]
        if airflow["running"] > 0:
            st.markdown(f"""
            <div class="app-tile">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0; color: #f0f6fc;">Apache Airflow</h4>
                    <span class="status-active">ACTIVE</span>
                </div>
                <p>Workflow Orchestration Platform</p>
                <p><strong>Status:</strong> {airflow["running"]}/{airflow["total"]} pods running, {airflow["services"]} services</p>
                <p style="font-family: monospace; color: #58a6ff; margin-top: 1rem;">Internal: airflow-webserver.airflow.svc.cluster.local:8080</p>
            </div>
            """, unsafe_allow_html=True)
            
            if st.button("Port-forward Airflow", key="airflow_btn", use_container_width=True):
                st.code("kubectl port-forward -n airflow svc/airflow-webserver 8081:8080")
                st.success("Then access: http://localhost:8081")
        else:
            st.markdown("""
            <div class="app-tile" style="opacity: 0.6;">
                <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                    <h4 style="margin: 0;">Apache Airflow</h4>
                    <span class="status-pending">NOT DEPLOYED</span>
                </div>
                <p>Workflow Orchestration Platform</p>
                <p><strong>Deploy:</strong> ./deploy-platform.sh orchestration</p>
            </div>
            """, unsafe_allow_html=True)
        
        st.divider()
        
        # Real deployment status
        st.markdown("### Real Deployment Status")
        
        waves = [
            ("Wave 0: Core", ["argocd"]),
            ("Wave 1: Infrastructure", ["vault", "istio-system"]),
            ("Wave 2: Shared", ["monitoring"]),
            ("Wave 3: Orchestration", ["airflow"])
        ]
        
        wave_cols = st.columns(4)
        for i, (wave_name, namespaces) in enumerate(waves):
            with wave_cols[i]:
                total_running = sum([k8s_data["namespace_data"][ns]["running"] for ns in namespaces])
                total_expected = len(namespaces)
                
                if total_running == total_expected and total_running > 0:
                    st.success(f"**{wave_name}**")
                    st.text("✓ DEPLOYED")
                elif total_running > 0:
                    st.warning(f"**{wave_name}**")
                    st.text("◐ PARTIAL")
                else:
                    st.error(f"**{wave_name}**")
                    st.text("○ PENDING")
        
        # Footer with real data
        st.divider()
        st.caption(f"Updated: {datetime.now().strftime('%H:%M:%S UTC')} | {active_services}/5 services running | Cluster: {k8s_data['nodes']} nodes")
        
    else:
        # Fallback when K8s API not available
        st.error("Unable to connect to Kubernetes API. Dashboard running in limited mode.")
        st.metric("Status", "API Connection Failed")
    
    # Platform operations
    st.divider()
    st.markdown("### Platform Operations")
    
    op_col1, op_col2, op_col3 = st.columns(3)
    
    with op_col1:
        if st.button("Deploy Shared Services", use_container_width=True):
            st.code("./deploy-platform.sh shared")
            st.info("Deploys Prometheus, Grafana, ELK stack")
    
    with op_col2:
        if st.button("Deploy Orchestration", use_container_width=True):
            st.code("./deploy-platform.sh orchestration")
            st.info("Deploys Airflow, MLflow")
    
    with op_col3:
        if st.button("Validate Platform", use_container_width=True):
            st.code("./deploy-platform.sh validate")
            st.info("Health checks on all services")