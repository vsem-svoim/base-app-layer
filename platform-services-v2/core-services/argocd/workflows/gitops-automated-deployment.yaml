apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: gitops-automated-deployment
  namespace: argocd
  labels:
    workflows.argoproj.io/creator: "gitops-automation"
spec:
  entrypoint: gitops-deployment-pipeline
  serviceAccountName: argo-workflows
  arguments:
    parameters:
      - name: git-repo
        value: "https://github.com/vsem-svoim/base-app-layer.git"
      - name: git-revision
        value: "main"
      - name: environment
        value: "dev"
  
  templates:
    # Main GitOps Pipeline
    - name: gitops-deployment-pipeline
      dag:
        tasks:
          # Wave 1: Infrastructure Foundation
          - name: deploy-infrastructure
            template: deploy-applicationset
            arguments:
              parameters:
                - name: appset-name
                  value: "infrastructure-foundation"
                - name: wave-number
                  value: "1"
                - name: timeout
                  value: "600"
          
          # Wave 2: Core Platform Services
          - name: deploy-.platform-services
            template: deploy-applicationset
            dependencies: [deploy-infrastructure]
            arguments:
              parameters:
                - name: appset-name
                  value: ".platform-services"
                - name: wave-number
                  value: "2"
                - name: timeout
                  value: "900"
          
          # Wave 3: Data Layer Components
          - name: deploy-data-layer
            template: deploy-applicationset
            dependencies: [deploy-.platform-services]
            arguments:
              parameters:
                - name: appset-name
                  value: "data-layer-components"
                - name: wave-number
                  value: "3"
                - name: timeout
                  value: "1200"
          
          # Wave 4: ML Platform & Analytics
          - name: deploy-ml-platform
            template: deploy-applicationset
            dependencies: [deploy-data-layer]
            arguments:
              parameters:
                - name: appset-name
                  value: "ml-platform"
                - name: wave-number
                  value: "4"
                - name: timeout
                  value: "1500"
          
          # Final: Validation & Testing
          - name: run-validation
            template: validate-deployment
            dependencies: [deploy-ml-platform]
    
    # Deploy ApplicationSet Template
    - name: deploy-applicationset
      inputs:
        parameters:
          - name: appset-name
          - name: wave-number
          - name: timeout
      script:
        image: argoproj/argocd:v2.8.4
        command: [sh]
        source: |
          set -e
          
          APPSET_NAME="{{inputs.parameters.appset-name}}"
          WAVE_NUMBER="{{inputs.parameters.wave-number}}"
          TIMEOUT="{{inputs.parameters.timeout}}"
          
          echo "üöÄ Starting GitOps Wave ${WAVE_NUMBER}: ${APPSET_NAME}"
          
          # Apply ApplicationSet from Git
          kubectl apply -f - <<EOF
          apiVersion: argoproj.io/v1alpha1
          kind: ApplicationSet
          metadata:
            name: ${APPSET_NAME}
            namespace: argocd
            annotations:
              argocd.argoproj.io/sync-wave: "${WAVE_NUMBER}"
          spec:
            generators:
              - git:
                  repoURL: {{workflow.parameters.git-repo}}
                  revision: {{workflow.parameters.git-revision}}
                  directories:
                    - path: "*/overlays/{{workflow.parameters.environment}}"
                    - path: "platform-services/kustomize/base-layer/*/overlays/{{workflow.parameters.environment}}"
            template:
              metadata:
                name: '{{path.basename}}-{{workflow.parameters.environment}}'
                labels:
                  deployment-wave: "${WAVE_NUMBER}"
                  environment: "{{workflow.parameters.environment}}"
              spec:
                project: default
                source:
                  repoURL: {{workflow.parameters.git-repo}}
                  targetRevision: {{workflow.parameters.git-revision}}
                  path: '{{path}}'
                destination:
                  server: https://kubernetes.default.svc
                  namespace: 'base-{{path.basename}}'
                syncPolicy:
                  automated:
                    prune: true
                    selfHeal: true
                  syncOptions:
                    - CreateNamespace=true
                    - PrunePropagationPolicy=foreground
                  retry:
                    limit: 5
                    backoff:
                      duration: 5s
                      factor: 2
                      maxDuration: 3m
          EOF
          
          # Wait for ApplicationSet to create applications
          echo "‚è≥ Waiting for ApplicationSet to generate applications..."
          sleep 30
          
          # Get applications created by this ApplicationSet
          APPS=$(kubectl get applications -n argocd -l deployment-wave=${WAVE_NUMBER} -o jsonpath='{.items[*].metadata.name}')
          
          if [ -z "$APPS" ]; then
            echo "‚ö†Ô∏è  No applications generated by ApplicationSet ${APPSET_NAME}"
            exit 0
          fi
          
          echo "üìã Applications in wave ${WAVE_NUMBER}: $APPS"
          
          # Sync all applications in this wave
          for app in $APPS; do
            echo "üîÑ Syncing application: $app"
            argocd app sync $app --server argocd-server.argocd.svc.cluster.local:443 --prune || {
              echo "‚ùå Failed to sync $app"
              # Continue with other apps rather than failing completely
            }
          done
          
          # Wait for all apps to be healthy
          echo "‚è≥ Waiting for wave ${WAVE_NUMBER} to become healthy..."
          START_TIME=$(date +%s)
          
          while true; do
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - START_TIME))
            
            if [ $ELAPSED -gt $TIMEOUT ]; then
              echo "‚ö†Ô∏è  Timeout reached for wave ${WAVE_NUMBER}, but continuing..."
              break
            fi
            
            ALL_HEALTHY=true
            for app in $APPS; do
              HEALTH=$(kubectl get application $app -n argocd -o jsonpath='{.status.health.status}' 2>/dev/null || echo "Unknown")
              SYNC=$(kubectl get application $app -n argocd -o jsonpath='{.status.sync.status}' 2>/dev/null || echo "Unknown")
              
              if [ "$HEALTH" != "Healthy" ] || [ "$SYNC" != "Synced" ]; then
                ALL_HEALTHY=false
                break
              fi
            done
            
            if [ "$ALL_HEALTHY" = true ]; then
              echo "‚úÖ Wave ${WAVE_NUMBER} deployed successfully!"
              break
            fi
            
            echo "‚è≥ Wave ${WAVE_NUMBER} still syncing... (${ELAPSED}s elapsed)"
            sleep 30
          done
        env:
          - name: ARGOCD_SERVER
            value: "argocd-server.argocd.svc.cluster.local:443"
    
    # Validation Template
    - name: validate-deployment
      script:
        image: bitnami/kubectl:latest
        command: [sh]
        source: |
          echo "üîç Validating complete deployment..."
          
          # Count applications
          TOTAL_APPS=$(kubectl get applications -n argocd --no-headers | wc -l)
          HEALTHY_APPS=$(kubectl get applications -n argocd -o jsonpath='{.items[?(@.status.health.status=="Healthy")].metadata.name}' | wc -w)
          SYNCED_APPS=$(kubectl get applications -n argocd -o jsonpath='{.items[?(@.status.sync.status=="Synced")].metadata.name}' | wc -w)
          
          echo "üìä Deployment Summary:"
          echo "   Total Applications: $TOTAL_APPS"
          echo "   Healthy Applications: $HEALTHY_APPS"
          echo "   Synced Applications: $SYNCED_APPS"
          
          # Check critical components
          echo "üîç Checking critical components..."
          
          CRITICAL_APPS=("argo-workflows" "mlflow" "monitoring-stack")
          for app in "${CRITICAL_APPS[@]}"; do
            if kubectl get application $app -n argocd >/dev/null 2>&1; then
              HEALTH=$(kubectl get application $app -n argocd -o jsonpath='{.status.health.status}')
              echo "   $app: $HEALTH"
            else
              echo "   $app: Not Found"
            fi
          done
          
          # Success criteria
          if [ $HEALTHY_APPS -gt 5 ] && [ $SYNCED_APPS -gt 5 ]; then
            echo "‚úÖ GitOps deployment validation PASSED"
          else
            echo "‚ö†Ô∏è  GitOps deployment validation WARNING - some components may need attention"
          fi
---
# Trigger for automated deployment
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: gitops-automated-deployment-
  namespace: argocd
  labels:
    workflows.argoproj.io/automation: "true"
spec:
  entrypoint: gitops-deployment-pipeline
  serviceAccountName: argo-workflows
  workflowTemplateRef:
    name: gitops-automated-deployment
  arguments:
    parameters:
      - name: git-repo
        value: "https://github.com/vsem-svoim/base-app-layer.git"
      - name: git-revision
        value: "main"
      - name: environment
        value: "dev"