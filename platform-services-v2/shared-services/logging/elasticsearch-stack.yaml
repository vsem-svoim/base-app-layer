---
apiVersion: v1
kind: Namespace
metadata:
  name: logging
  labels:
    app.kubernetes.io/name: logging
    app.kubernetes.io/component: log-aggregation
    istio-injection: enabled
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  namespace: logging
  labels:
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: search-engine
spec:
  serviceName: elasticsearch
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: elasticsearch
  template:
    metadata:
      labels:
        app.kubernetes.io/name: elasticsearch
        app.kubernetes.io/component: search-engine
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      nodeSelector:
        eks.amazonaws.com/nodegroup: platform_system
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
        ports:
        - containerPort: 9200
          name: rest
          protocol: TCP
        - containerPort: 9300
          name: inter-node
          protocol: TCP
        env:
        - name: cluster.name
          value: base-platform-logs
        - name: node.name
          value: elasticsearch-0
        - name: discovery.type
          value: single-node
        - name: bootstrap.memory_lock
          value: "false"
        - name: ES_JAVA_OPTS
          value: "-Xms1g -Xmx1g"
        - name: xpack.security.enabled
          value: "false"
        - name: xpack.security.enrollment.enabled
          value: "false"
        resources:
          requests:
            cpu: 500m
            memory: 1.5Gi
          limits:
            cpu: 1000m
            memory: 2Gi
        volumeMounts:
        - name: data
          mountPath: /usr/share/elasticsearch/data
        livenessProbe:
          httpGet:
            scheme: HTTP
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 90
          periodSeconds: 10
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 30
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app.kubernetes.io/name: elasticsearch
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: gp3
      resources:
        requests:
          storage: 20Gi
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: logging
  labels:
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: search-engine
spec:
  type: ClusterIP
  ports:
  - name: rest
    port: 9200
    protocol: TCP
    targetPort: rest
  - name: inter-node
    port: 9300
    protocol: TCP
    targetPort: inter-node
  selector:
    app.kubernetes.io/name: elasticsearch
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-configmap
  namespace: logging
data:
  logstash.yml: |
    http.host: "0.0.0.0"
    path.config: /usr/share/logstash/pipeline
  logstash.conf: |
    input {
      beats {
        port => 5044
      }
    }
    filter {
      if [kubernetes] {
        if [kubernetes][labels][app] {
          mutate {
            add_field => { "[@metadata][app]" => "%{[kubernetes][labels][app]}" }
          }
        }
        if [kubernetes][container][name] {
          mutate {
            add_field => { "[@metadata][container]" => "%{[kubernetes][container][name]}" }
          }
        }
      }
      # Parse JSON logs from applications
      if [message] =~ /^\{.*\}$/ {
        json {
          source => "message"
        }
      }
      # Add timestamp
      date {
        match => [ "timestamp", "ISO8601" ]
      }
    }
    output {
      elasticsearch {
        hosts => [ "elasticsearch.logging.svc.cluster.local:9200" ]
        index => "logstash-base-platform-%{+YYYY.MM.dd}"
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: logging
  labels:
    app.kubernetes.io/name: logstash
    app.kubernetes.io/component: log-processor
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: logstash
  template:
    metadata:
      labels:
        app.kubernetes.io/name: logstash
        app.kubernetes.io/component: log-processor
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      nodeSelector:
        eks.amazonaws.com/nodegroup: platform_system
      containers:
      - name: logstash
        image: docker.elastic.co/logstash/logstash:8.8.0
        ports:
        - containerPort: 5044
          name: beats
        env:
        - name: LS_JAVA_OPTS
          value: "-Xmx512m -Xms512m"
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
        - name: config-volume
          mountPath: /usr/share/logstash/config
        - name: pipeline-volume
          mountPath: /usr/share/logstash/pipeline
        readinessProbe:
          httpGet:
            path: /
            port: 9600
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: 9600
          initialDelaySeconds: 60
          periodSeconds: 10
      volumes:
      - name: config-volume
        configMap:
          name: logstash-configmap
          items:
          - key: logstash.yml
            path: logstash.yml
      - name: pipeline-volume
        configMap:
          name: logstash-configmap
          items:
          - key: logstash.conf
            path: logstash.conf
---
apiVersion: v1
kind: Service
metadata:
  name: logstash
  namespace: logging
  labels:
    app.kubernetes.io/name: logstash
    app.kubernetes.io/component: log-processor
spec:
  type: ClusterIP
  ports:
  - name: beats
    port: 5044
    protocol: TCP
    targetPort: beats
  selector:
    app.kubernetes.io/name: logstash
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  namespace: logging
  labels:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/component: log-visualization
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kibana
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kibana
        app.kubernetes.io/component: log-visualization
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      nodeSelector:
        eks.amazonaws.com/nodegroup: platform_system
      containers:
      - name: kibana
        image: docker.elastic.co/kibana/kibana:8.8.0
        ports:
        - containerPort: 5601
        env:
        - name: ELASTICSEARCH_URL
          value: http://elasticsearch.logging.svc.cluster.local:9200
        - name: ELASTICSEARCH_HOSTS
          value: http://elasticsearch.logging.svc.cluster.local:9200
        - name: SERVER_NAME
          value: kibana.base-app-layer.dev
        - name: SERVER_BASEPATH
          value: ""
        - name: XPACK_SECURITY_ENABLED
          value: "false"
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 500m
            memory: 1Gi
        readinessProbe:
          httpGet:
            path: /app/kibana
            port: 5601
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /app/kibana
            port: 5601
          initialDelaySeconds: 60
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: kibana
  namespace: logging
  labels:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/component: log-visualization
spec:
  type: ClusterIP
  ports:
  - name: web
    port: 5601
    protocol: TCP
    targetPort: 5601
  selector:
    app.kubernetes.io/name: kibana