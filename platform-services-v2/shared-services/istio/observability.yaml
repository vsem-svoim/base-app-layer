---
apiVersion: v1
kind: ConfigMap
metadata:
  name: istio-observability
  namespace: istio-system
data:
  custom_bootstrap.json: |
    {
      "tracing": {
        "http": {
          "name": "envoy.tracers.jaeger",
          "typed_config": {
            "@type": "type.googleapis.com/envoy.config.trace.v3.JaegerConfig",
            "collector_cluster": "jaeger",
            "collector_endpoint": "/api/traces"
          }
        }
      }
    }
---
apiVersion: networking.istio.io/v1beta1
kind: EnvoyFilter
metadata:
  name: prometheus-stats-config
  namespace: istio-system
spec:
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.wasm
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
          config:
            name: "stats"
            root_id: "stats_root"
            vm_config:
              vm_id: "stats"
              runtime: envoy.wasm.runtime.null
              code:
                local:
                  inline_string: |
                    const STATS_CONFIG = {
                      inclusion_regexps: [
                        ".*_cx_.*",
                        ".*_rq_.*",
                        ".*_rbac_.*"
                      ]
                    };
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: istio-grafana-config
  namespace: istio-system
data:
  grafana.yaml: |
    datasources:
    - name: Prometheus
      type: prometheus
      url: http://prometheus.monitoring.svc.cluster.local:9090
      access: proxy
      isDefault: true
    - name: Jaeger
      type: jaeger
      url: http://jaeger-query.istio-system.svc.cluster.local:16686
      access: proxy
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grafana-vs
  namespace: istio-system
spec:
  hosts:
  - "grafana.base-app-layer.dev"
  gateways:
  - base-platform-gateway
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: grafana.monitoring.svc.cluster.local
        port:
          number: 3000
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: airflow-vs
  namespace: istio-system
spec:
  hosts:
  - "airflow.base-app-layer.dev"
  gateways:
  - base-platform-gateway
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: airflow-webserver.airflow.svc.cluster.local
        port:
          number: 8080
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: mlflow-vs
  namespace: istio-system
spec:
  hosts:
  - "mlflow.base-app-layer.dev"
  gateways:
  - base-platform-gateway
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: mlflow-service.mlflow.svc.cluster.local
        port:
          number: 5000
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: vault-vs
  namespace: istio-system
spec:
  hosts:
  - "vault.base-app-layer.dev"
  gateways:
  - base-platform-gateway
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: vault.vault.svc.cluster.local
        port:
          number: 8200
---
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: platform-jwt
  namespace: istio-system
spec:
  selector:
    matchLabels:
      app: istio-ingressgateway
  jwtRules:
  - issuer: "base-platform-auth"
    audiences:
    - "base-platform"
    jwksUri: "http://vault.vault.svc.cluster.local:8200/v1/auth/jwt/jwks"
---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: platform-services-dr
  namespace: istio-system
spec:
  host: "*.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
  exportTo:
  - "*"