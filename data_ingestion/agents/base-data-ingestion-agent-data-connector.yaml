apiVersion: v1
kind: ServiceAccount
metadata:
  name: base-data-connector-sa
  namespace: base-ingestion
  labels:
    app.kubernetes.io/name: base-data-connector
    app.kubernetes.io/component: ingestion
    app.kubernetes.io/part-of: base-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: base-data-ingestion-agent-data-connector
  namespace: base-ingestion
  labels:
    app.kubernetes.io/name: base-data-connector
    app.kubernetes.io/component: ingestion
    app.kubernetes.io/part-of: base-system
    base.io/category: data_ingestion
    base.io/type: agent
    base.io/function: data-connector
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: base-data-connector
  template:
    metadata:
      labels:
        app.kubernetes.io/name: base-data-connector
        app.kubernetes.io/component: ingestion
        app.kubernetes.io/part-of: base-system
        base.io/category: data_ingestion
        base.io/type: agent
    spec:
      serviceAccountName: base-data-connector-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: data-connector
        image: base/data-connector:v2.5.0-fixed
        imagePullPolicy: Always
        ports:
        - name: http-metrics
          containerPort: 9090
          protocol: TCP
        - name: http-health
          containerPort: 8080
          protocol: TCP
        env:
        - name: LOG_LEVEL
          value: "info"
        - name: LOG_FORMAT
          value: "json"
        - name: MAX_CONNECTION_POOLS
          value: "50"
        - name: MAX_CONNECTIONS_PER_POOL
          value: "100"
        - name: CONNECTION_TIMEOUT
          value: "30s"
        - name: IDLE_TIMEOUT
          value: "300s"
        - name: TOKEN_REFRESH_INTERVAL
          value: "3600s"
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
            ephemeral-storage: "2Gi"
          limits:
            cpu: "2"
            memory: "4Gi"
            ephemeral-storage: "10Gi"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 20
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: secrets-volume
          mountPath: /app/secrets
          readOnly: true
        - name: cert-volume
          mountPath: /app/certs
          readOnly: true
      volumes:
      - name: config-volume
        configMap:
          name: base-data-connector-config
      - name: secrets-volume
        secret:
          secretName: base-data-connector-secrets
      - name: cert-volume
        secret:
          secretName: base-data-connector-certs
---
apiVersion: v1
kind: Service
metadata:
  name: base-data-connector-service
  namespace: base-ingestion
  labels:
    app.kubernetes.io/name: base-data-connector
    app.kubernetes.io/component: ingestion
spec:
  type: ClusterIP
  ports:
  - name: http-metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  - name: http-health
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app.kubernetes.io/name: base-data-connector
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: base-data-connector-config
  namespace: base-ingestion
  labels:
    app.kubernetes.io/name: base-data-connector
    app.kubernetes.io/component: ingestion
data:
  connector.yaml: |
    # Data Connector Agent Configuration
    connector:
      # Agent Identity and Responsibility
      name: "base-data-connector"
      version: "v2.5.0"
      responsibility: "Connection lifecycle and authentication management for data sources"
      
      # Connection Pool Management
      connection_pools:
        max_pools: 50
        default_pool_config:
          max_connections: 100
          min_idle: 5
          max_idle: 20
          connection_timeout: 30s
          idle_timeout: 300s
          max_lifetime: 3600s
          validation_timeout: 5s
          
      # Authentication Methods Configuration
      authentication:
        oauth2:
          grant_types:
            - client_credentials
            - authorization_code
            - refresh_token
          token_cache_ttl: 3600s
          refresh_threshold: 300s
          max_retries: 3
          
        jwt:
          algorithms:
            - RS256
            - HS256
            - ES256
          verification:
            verify_signature: true
            verify_expiry: true
            verify_audience: true
          cache_public_keys: true
          
        api_key:
          locations:
            - header
            - query
            - body
          rotation_interval: 30d
          validation_endpoint: "/validate"
          
        certificate:
          types:
            - x509
            - rsa
            - ec
          validation:
            verify_chain: true
            check_revocation: true
            require_client_cert: false
          cipher_suites:
            - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
            - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
            - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
            
        basic_auth:
          encoding: base64
          realm: "Base Data Platform"
          
        saml:
          sso_url: "${SAML_SSO_URL}"
          issuer: "${SAML_ISSUER}"
          certificate_path: "/app/certs/saml.pem"
          
      # SSL/TLS Configuration
      tls:
        versions:
          - "1.2"
          - "1.3"
        verify_certificates: true
        ca_bundle_path: "/app/certs/ca-bundle.pem"
        mutual_tls: false
        
      # Connection Health and Monitoring
      health_checks:
        enabled: true
        interval: 30s
        timeout: 10s
        failure_threshold: 3
        success_threshold: 1
        
      # Circuit Breaker Configuration
      circuit_breaker:
        failure_threshold: 5
        success_threshold: 3
        timeout: 30s
        half_open_max_calls: 3
        
      # Retry Mechanisms
      retry_policy:
        max_attempts: 3
        initial_delay: 1s
        max_delay: 30s
        backoff_multiplier: 2.0
        retry_on:
          - connection_timeout
          - temporary_failure
          - rate_limit
          
      # Load Balancing and Failover
      load_balancing:
        strategy: round_robin # round_robin, least_connections, weighted
        health_check_enabled: true
        failover_enabled: true
        
      # Integration Configuration
      integration:
        collector_service:
          endpoint: "http://base-data-collector-service:8080"
          timeout: 30s
        security_service:
          endpoint: "http://base-data-security-service:8080"
          encryption_required: true
        event_service:
          endpoint: "http://base-event-coordinator-service:8080"
          events:
            - "connection_established"
            - "connection_failed"
            - "connection_closed"
            - "authentication_success"
            - "authentication_failure"
            
      # Performance Optimization
      performance:
        keep_alive: true
        keep_alive_timeout: 300s
        max_idle_connections: 100
        max_connections_per_host: 20
        disable_compression: false
        
      # Security Policies
      security:
        credential_encryption: true
        audit_logging: true
        access_control:
          rbac_enabled: true
          default_deny: true
        compliance:
          gdpr: true
          sox: true
          pci_dss: true
          
    # Connection Profiles for Different Source Types
    profiles:
      high_volume:
        pool_size: 50
        timeout: 300s
        retry_attempts: 5
        backoff_strategy: exponential
        keep_alive: true
        
      real_time:
        pool_size: 10
        timeout: 30s
        retry_attempts: 3
        backoff_strategy: linear
        keep_alive: true
        
      batch:
        pool_size: 20
        timeout: 600s
        retry_attempts: 10
        backoff_strategy: exponential
        keep_alive: false
        
      secure:
        pool_size: 5
        timeout: 60s
        retry_attempts: 2
        backoff_strategy: exponential
        tls_required: true
        mutual_tls: true
        
    # Logging Configuration  
    logging:
      level: info
      format: json
      output: stdout
      audit_enabled: true
      sensitive_data_masking: true
      
    # Monitoring Configuration
    monitoring:
      prometheus:
        enabled: true
        port: 9090
        path: "/metrics"
      custom_metrics:
        - name: "active_connections"
          type: "gauge"
          description: "Number of active connections"
        - name: "connection_pool_utilization"
          type: "gauge"
          description: "Connection pool utilization percentage"
        - name: "auth_success_rate"
          type: "counter"
          description: "Authentication success rate"
        - name: "connection_latency"
          type: "histogram"
          description: "Connection establishment latency"
        - name: "connection_errors"
          type: "counter"
          description: "Connection error count"
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: base-data-connector-netpol
  namespace: base-ingestion
  labels:
    app.kubernetes.io/name: base-data-connector
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: base-data-connector
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: base-ingestion
    - namespaceSelector:
        matchLabels:
          name: base-monitoring
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  egress:
  - {} # Allow all egress for external connections
---
apiVersion: v1
kind: Secret
metadata:
  name: base-data-connector-secrets
  namespace: base-ingestion
  labels:
    app.kubernetes.io/name: base-data-connector
type: Opaque
stringData:
  # Authentication Credentials
  auth_config.yaml: |
    # OAuth2 Client Credentials
    oauth2_clients:
      salesforce:
        client_id: "${SALESFORCE_CLIENT_ID}"
        client_secret: "${SALESFORCE_CLIENT_SECRET}"
        token_url: "https://login.salesforce.com/services/oauth2/token"
        scope: "api"
      azure_ad:
        client_id: "${AZURE_AD_CLIENT_ID}"
        client_secret: "${AZURE_AD_CLIENT_SECRET}"
        tenant_id: "${AZURE_AD_TENANT_ID}"
        token_url: "https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/token"
        
    # API Keys
    api_keys:
      bloomberg:
        key: "${BLOOMBERG_API_KEY}"
        header_name: "X-API-Key"
      reuters:
        key: "${REUTERS_API_KEY}"
        header_name: "Authorization"
        prefix: "Bearer "
        
    # Basic Auth Credentials  
    basic_auth:
      legacy_system:
        username: "${LEGACY_USERNAME}"
        password: "${LEGACY_PASSWORD}"
        
    # Database Credentials
    databases:
      postgres:
        username: "${POSTGRES_USER}"
        password: "${POSTGRES_PASSWORD}"
      mysql:
        username: "${MYSQL_USER}"
        password: "${MYSQL_PASSWORD}"
      mongodb:
        username: "${MONGODB_USER}"
        password: "${MONGODB_PASSWORD}"
        
  # Connection Strings
  connections.yaml: |
    endpoints:
      # Financial Data Sources
      nyse_api:
        url: "https://api.nyse.com/v1"
        auth_type: "api_key"
        timeout: 30s
      nasdaq_api:
        url: "https://api.nasdaq.com/v2"
        auth_type: "oauth2"
        timeout: 30s
        
      # Database Connections
      financial_db:
        host: "${FINANCIAL_DB_HOST}"
        port: 5432
        database: "financial_data"
        ssl_mode: "require"
      analytics_db:
        host: "${ANALYTICS_DB_HOST}"
        port: 3306
        database: "analytics"
        ssl_mode: "preferred"
        
      # Message Queues
      kafka_cluster:
        brokers:
          - "${KAFKA_BROKER_1}"
          - "${KAFKA_BROKER_2}"
          - "${KAFKA_BROKER_3}"
        security_protocol: "SASL_SSL"
        sasl_mechanism: "PLAIN"
---
apiVersion: v1
kind: Secret
metadata:
  name: base-data-connector-certs
  namespace: base-ingestion
  labels:
    app.kubernetes.io/name: base-data-connector
type: kubernetes.io/tls
stringData:
  ca-bundle.pem: |
    # Root CA certificates bundle
    # (Certificate content would be injected here)
    -----BEGIN CERTIFICATE-----
    # Root CA Certificate
    -----END CERTIFICATE-----
  tls.crt: |
    # Client certificate for mTLS
    -----BEGIN CERTIFICATE-----
    # Client Certificate
    -----END CERTIFICATE-----
  tls.key: |
    # Private key for client certificate
    -----BEGIN PRIVATE KEY-----
    # Private Key
    -----END PRIVATE KEY-----