# BASE Platform Local Development with Docker Compose
# Simulates key platform services for development and testing

version: '3.8'

services:
  # ArgoCD (GitOps)
  argocd-server:
    image: quay.io/argoproj/argocd:v2.9.3
    ports:
      - "8080:8080"
    environment:
      - ARGOCD_SERVER_INSECURE=true
    volumes:
      - argocd-data:/home/argocd
    networks:
      - base-platform

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:v2.53.0
    ports:
      - "9090:9090"
    volumes:
      - ./dev-configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - base-platform

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:11.1.3
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - base-platform

  # Elasticsearch (Logging)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - base-platform

  # Kibana (Log Visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - XPACK_SECURITY_ENABLED=false
    depends_on:
      - elasticsearch
    networks:
      - base-platform

  # PostgreSQL (Database for Airflow/MLflow)
  postgres:
    image: postgres:15.4
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=platform
      - POSTGRES_PASSWORD=platform123
      - POSTGRES_MULTIPLE_DATABASES=airflow,mlflow
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./dev-configs/create-multiple-databases.sh:/docker-entrypoint-initdb.d/create-multiple-databases.sh
    networks:
      - base-platform

  # MLflow (ML Lifecycle)
  mlflow:
    image: mlflow/mlflow:v3.2.0
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://platform:platform123@postgres:5432/mlflow
    command: >
      mlflow server 
      --host 0.0.0.0 
      --port 5000 
      --backend-store-uri postgresql://platform:platform123@postgres:5432/mlflow
      --serve-artifacts
    depends_on:
      - postgres
    networks:
      - base-platform

  # Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.9.3-python3.11
    ports:
      - "8081:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://platform:platform123@postgres:5432/airflow
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW_CONN_METADATA_DB=postgres://platform:platform123@postgres:5432/airflow
      - AIRFLOW_VAR_METADATA_DB_SCHEMA=airflow
      - _AIRFLOW_DB_MIGRATE=true
      - _AIRFLOW_WWW_USER_CREATE=true
      - _AIRFLOW_WWW_USER_USERNAME=admin
      - _AIRFLOW_WWW_USER_PASSWORD=admin123
    volumes:
      - ./dev-configs/airflow-dags:/opt/airflow/dags
    depends_on:
      - postgres
    networks:
      - base-platform
    command: >
      bash -c "airflow db init && 
               airflow users create --username admin --password admin123 --firstname Admin --lastname User --role Admin --email admin@base-app-layer.dev &&
               airflow webserver"

  # Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.9.3-python3.11
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://platform:platform123@postgres:5432/airflow
      - AIRFLOW_CONN_METADATA_DB=postgres://platform:platform123@postgres:5432/airflow
    volumes:
      - ./dev-configs/airflow-dags:/opt/airflow/dags
    depends_on:
      - postgres
      - airflow-webserver
    networks:
      - base-platform
    command: airflow scheduler

  # Platform UI (Simple nginx serving static files)
  platform-ui:
    image: nginx:alpine
    ports:
      - "8082:80"
    volumes:
      - ./dev-configs/nginx.conf:/etc/nginx/nginx.conf
      - ./dev-configs/platform-ui:/usr/share/nginx/html
    networks:
      - base-platform

volumes:
  argocd-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
  postgres-data:

networks:
  base-platform:
    driver: bridge