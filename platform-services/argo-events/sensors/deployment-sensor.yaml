apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: deployment-automation-sensor
  namespace: argocd
  labels:
    app.kubernetes.io/name: deployment-sensor
    app.kubernetes.io/component: automation
spec:
  template:
    serviceAccountName: argo-workflows
  dependencies:
    - name: webhook-dep
      eventSourceName: webhook-source
      eventName: deployment-trigger
    - name: github-dep
      eventSourceName: github-source
      eventName: base-app-layer
  triggers:
    - template:
        name: start-deployment-waves
        argoWorkflow:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: deployment-waves-
                namespace: argocd
                labels:
                  workflow-type: deployment-automation
              spec:
                entrypoint: deployment-waves
                serviceAccountName: argo-workflows
                templates:
                  - name: deployment-waves
                    dag:
                      tasks:
                        # Wave 1: Infrastructure Components
                        - name: deploy-infrastructure
                          template: sync-applicationset
                          arguments:
                            parameters:
                              - name: appset-name
                                value: "infrastructure-components"
                              - name: wave
                                value: "1"
                        
                        # Wave 2: Core Data Layer
                        - name: deploy-data-core
                          template: sync-applicationset
                          dependencies: [deploy-infrastructure]
                          arguments:
                            parameters:
                              - name: appset-name
                                value: "data-core-components"
                              - name: wave
                                value: "2"
                        
                        # Wave 3: Processing Layer
                        - name: deploy-processing
                          template: sync-applicationset
                          dependencies: [deploy-data-core]
                          arguments:
                            parameters:
                              - name: appset-name
                                value: "processing-components"
                              - name: wave
                                value: "3"
                        
                        # Wave 4: ML Platform
                        - name: deploy-ml-platform
                          template: sync-applicationset
                          dependencies: [deploy-processing]
                          arguments:
                            parameters:
                              - name: appset-name
                                value: "ml-platform-components"
                              - name: wave
                                value: "4"
                  
                  - name: sync-applicationset
                    inputs:
                      parameters:
                        - name: appset-name
                        - name: wave
                    script:
                      image: argoproj/argocd:v2.8.4
                      command: [sh]
                      source: |
                        echo "Starting deployment wave {{inputs.parameters.wave}}: {{inputs.parameters.appset-name}}"
                        
                        # Sync all applications in the ApplicationSet
                        kubectl get applications -n argocd -l argocd.argoproj.io/applicationset={{inputs.parameters.appset-name}} -o name | \
                        while read app; do
                          echo "Syncing $app"
                          argocd app sync $(basename $app) --server argocd-server.argocd.svc.cluster.local:443
                          argocd app wait $(basename $app) --server argocd-server.argocd.svc.cluster.local:443 --health
                        done
                        
                        echo "Wave {{inputs.parameters.wave}} completed successfully"
                      env:
                        - name: ARGOCD_SERVER
                          value: "argocd-server.argocd.svc.cluster.local:443"
                        - name: ARGOCD_AUTH_TOKEN
                          valueFrom:
                            secretKeyRef:
                              name: argocd-token
                              key: token