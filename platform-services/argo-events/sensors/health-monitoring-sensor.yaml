apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: health-monitoring-sensor
  namespace: argocd
  labels:
    app.kubernetes.io/name: health-monitoring
    app.kubernetes.io/component: automation
spec:
  template:
    serviceAccountName: argo-workflows
  dependencies:
    - name: prometheus-alert
      eventSourceName: prometheus-source
      eventName: alert-webhook
  triggers:
    - template:
        name: handle-deployment-failure
        conditions: |
          alert_name == "ApplicationSyncFailed" || alert_name == "DeploymentWaveStalled"
        argoWorkflow:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: deployment-recovery-
                namespace: argocd
                labels:
                  workflow-type: deployment-recovery
              spec:
                entrypoint: deployment-recovery
                serviceAccountName: argo-workflows
                templates:
                  - name: deployment-recovery
                    dag:
                      tasks:
                        - name: assess-failure
                          template: assess-deployment-failure
                        
                        - name: attempt-recovery
                          template: recovery-action
                          dependencies: [assess-failure]
                          when: "{{tasks.assess-failure.outputs.result}} == 'recoverable'"
                        
                        - name: trigger-rollback
                          template: rollback-action
                          dependencies: [assess-failure]
                          when: "{{tasks.assess-failure.outputs.result}} == 'rollback'"
                  
                  - name: assess-deployment-failure
                    script:
                      image: argoproj/argocd:v2.8.4
                      command: [sh]
                      source: |
                        echo "Assessing deployment failure..."
                        
                        # Get failed applications
                        FAILED_APPS=$(kubectl get applications -n argocd --field-selector status.health.status!=Healthy -o jsonpath='{.items[*].metadata.name}')
                        
                        if [ -z "$FAILED_APPS" ]; then
                          echo "No failed applications found"
                          echo "recoverable"
                          exit 0
                        fi
                        
                        # Check failure patterns
                        FAILURE_COUNT=$(echo $FAILED_APPS | wc -w)
                        
                        if [ $FAILURE_COUNT -lt 3 ]; then
                          echo "Limited failures detected, attempting recovery"
                          echo "recoverable"
                        else
                          echo "Multiple failures detected, triggering rollback"
                          echo "rollback"
                        fi
                  
                  - name: recovery-action
                    script:
                      image: argoproj/argocd:v2.8.4
                      command: [sh]
                      source: |
                        echo "Attempting deployment recovery..."
                        
                        # Retry sync for failed applications
                        FAILED_APPS=$(kubectl get applications -n argocd --field-selector status.health.status!=Healthy -o jsonpath='{.items[*].metadata.name}')
                        
                        for app in $FAILED_APPS; do
                          echo "Retrying sync for application: $app"
                          argocd app sync $app --server argocd-server.argocd.svc.cluster.local:443 --force
                          sleep 30
                        done
                        
                        # Wait for recovery
                        sleep 300
                        
                        # Check if recovery was successful
                        STILL_FAILED=$(kubectl get applications -n argocd --field-selector status.health.status!=Healthy -o jsonpath='{.items[*].metadata.name}')
                        
                        if [ -z "$STILL_FAILED" ]; then
                          echo "Recovery successful"
                        else
                          echo "Recovery failed, manual intervention required"
                          exit 1
                        fi
                  
                  - name: rollback-action
                    script:
                      image: argoproj/argocd:v2.8.4
                      command: [sh]
                      source: |
                        echo "Initiating deployment rollback..."
                        
                        # Get all applications and rollback
                        ALL_APPS=$(kubectl get applications -n argocd -o jsonpath='{.items[*].metadata.name}')
                        
                        for app in $ALL_APPS; do
                          echo "Rolling back application: $app"
                          argocd app rollback $app --server argocd-server.argocd.svc.cluster.local:443
                        done
                        
                        echo "Rollback initiated for all applications"
                      env:
                        - name: ARGOCD_SERVER
                          value: "argocd-server.argocd.svc.cluster.local:443"
                        - name: ARGOCD_AUTH_TOKEN
                          valueFrom:
                            secretKeyRef:
                              name: argocd-token
                              key: token
    
    - template:
        name: scale-infrastructure
        conditions: |
          alert_name == "BaseLayerComponentDown"
        argoWorkflow:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: infrastructure-scaling-
                namespace: argocd
              spec:
                entrypoint: scale-infrastructure
                serviceAccountName: argo-workflows
                templates:
                  - name: scale-infrastructure
                    script:
                      image: bitnami/kubectl:latest
                      command: [sh]
                      source: |
                        echo "Scaling infrastructure components..."
                        
                        # Scale up critical deployments
                        kubectl scale deployment --replicas=3 -n monitoring prometheus-operator
                        kubectl scale deployment --replicas=2 -n argocd argocd-server
                        kubectl scale deployment --replicas=2 -n crossplane-system crossplane
                        
                        echo "Infrastructure scaling completed"