apiVersion: v1
kind: ConfigMap
metadata:
  name: platform-ui-config
  namespace: platform-ui
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en" class="bg-background text-foreground">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>BASE Platform Dashboard</title>
        <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
        <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
        <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
        <script src="https://cdn.tailwindcss.com"></script>
        <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
        <style>
            :root {
              --background: 0 0% 100%;
              --foreground: 222.2 84% 4.9%;
              --card: 0 0% 100%;
              --card-foreground: 222.2 84% 4.9%;
              --popover: 0 0% 100%;
              --popover-foreground: 222.2 84% 4.9%;
              --primary: 222.2 47.4% 11.2%;
              --primary-foreground: 210 40% 98%;
              --secondary: 210 40% 96.1%;
              --secondary-foreground: 222.2 47.4% 11.2%;
              --muted: 210 40% 96.1%;
              --muted-foreground: 215.4 16.3% 46.9%;
              --accent: 210 40% 96.1%;
              --accent-foreground: 222.2 47.4% 11.2%;
              --destructive: 0 84.2% 60.2%;
              --destructive-foreground: 210 40% 98%;
              --border: 214.3 31.8% 91.4%;
              --input: 214.3 31.8% 91.4%;
              --ring: 222.2 84% 4.9%;
              --radius: 0.5rem;
            }
            .dark {
              --background: 222.2 84% 4.9%;
              --foreground: 210 40% 98%;
              --card: 222.2 84% 4.9%;
              --card-foreground: 210 40% 98%;
              --popover: 222.2 84% 4.9%;
              --popover-foreground: 210 40% 98%;
              --primary: 210 40% 98%;
              --primary-foreground: 222.2 47.4% 11.2%;
              --secondary: 217.2 32.6% 17.5%;
              --secondary-foreground: 210 40% 98%;
              --muted: 217.2 32.6% 17.5%;
              --muted-foreground: 215 20.2% 65.1%;
              --accent: 217.2 32.6% 17.5%;
              --accent-foreground: 210 40% 98%;
              --destructive: 0 62.8% 30.6%;
              --destructive-foreground: 210 40% 98%;
              --border: 217.2 32.6% 17.5%;
              --input: 217.2 32.6% 17.5%;
              --ring: 212.7 26.8% 83.9%;
            }
            body {
              font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
              background: hsl(var(--background));
              color: hsl(var(--foreground));
            }
            .btn {
              @apply inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background;
            }
            .btn-primary {
              @apply bg-primary text-primary-foreground hover:bg-primary/90 h-10 py-2 px-4;
            }
            .btn-outline {
              @apply border border-input hover:bg-accent hover:text-accent-foreground h-10 py-2 px-4;
            }
            .card {
              @apply rounded-lg border bg-card text-card-foreground shadow-sm;
            }
            .badge {
              @apply inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2;
            }
            .badge-success {
              @apply border-transparent bg-green-500 text-white;
            }
            .badge-info {
              @apply border-transparent bg-blue-500 text-white;
            }
            .badge-warning {
              @apply border-transparent bg-orange-500 text-white;
            }
        </style>
        <script>
            tailwind.config = {
              theme: {
                extend: {
                  colors: {
                    border: "hsl(var(--border))",
                    input: "hsl(var(--input))",
                    ring: "hsl(var(--ring))",
                    background: "hsl(var(--background))",
                    foreground: "hsl(var(--foreground))",
                    primary: {
                      DEFAULT: "hsl(var(--primary))",
                      foreground: "hsl(var(--primary-foreground))",
                    },
                    secondary: {
                      DEFAULT: "hsl(var(--secondary))",
                      foreground: "hsl(var(--secondary-foreground))",
                    },
                    destructive: {
                      DEFAULT: "hsl(var(--destructive))",
                      foreground: "hsl(var(--destructive-foreground))",
                    },
                    muted: {
                      DEFAULT: "hsl(var(--muted))",
                      foreground: "hsl(var(--muted-foreground))",
                    },
                    accent: {
                      DEFAULT: "hsl(var(--accent))",
                      foreground: "hsl(var(--accent-foreground))",
                    },
                    popover: {
                      DEFAULT: "hsl(var(--popover))",
                      foreground: "hsl(var(--popover-foreground))",
                    },
                    card: {
                      DEFAULT: "hsl(var(--card))",
                      foreground: "hsl(var(--card-foreground))",
                    },
                  },
                }
              }
            }
        </script>
    </head>
    <body class="min-h-screen bg-gray-50">
        <div id="root"></div>
        
        <script type="text/babel">
            const { useState, useEffect } = React;
            const { Shield, Rocket, Wind, Brain, BarChart3, Activity, Vault, User, LogOut, ExternalLink, Loader2 } = lucide;
            
            const services = [
                {
                    name: "ArgoCD",
                    description: "GitOps Continuous Deployment",
                    icon: Rocket,
                    url: "/argocd",
                    namespace: "argocd",
                    color: "text-blue-500"
                },
                {
                    name: "Vault",
                    description: "Secrets Management & Authentication",
                    icon: Vault,
                    url: "/vault", 
                    namespace: "vault",
                    color: "text-yellow-500"
                },
                {
                    name: "Airflow",
                    description: "Workflow Orchestration",
                    icon: Wind,
                    url: "/airflow",
                    namespace: "airflow",
                    color: "text-cyan-500"
                },
                {
                    name: "MLflow", 
                    description: "ML Lifecycle Management",
                    icon: Brain,
                    url: "/mlflow",
                    namespace: "mlflow",
                    color: "text-green-500"
                },
                {
                    name: "Grafana",
                    description: "Monitoring & Observability", 
                    icon: BarChart3,
                    url: "/grafana",
                    namespace: "monitoring",
                    color: "text-orange-500"
                },
                {
                    name: "Prometheus",
                    description: "Metrics Collection",
                    icon: Activity,
                    url: "/prometheus", 
                    namespace: "monitoring",
                    color: "text-red-500"
                }
            ];

            function VaultLogin({ onLogin }) {
                const [username, setUsername] = useState('');
                const [password, setPassword] = useState('');
                const [loading, setLoading] = useState(false);
                const [error, setError] = useState('');

                const handleLogin = async (e) => {
                    e.preventDefault();
                    setLoading(true);
                    setError('');

                    try {
                        const response = await fetch('/vault/v1/auth/userpass/login/' + username, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ password }),
                            redirect: 'manual'
                        });

                        if (response.ok) {
                            const data = await response.json();
                            localStorage.setItem('vault_token', data.auth.client_token);
                            localStorage.setItem('user_info', JSON.stringify({
                                username,
                                policies: data.auth.policies,
                                role: data.auth.metadata?.role || 'user'
                            }));
                            onLogin({
                                username,
                                token: data.auth.client_token,
                                policies: data.auth.policies,
                                role: data.auth.metadata?.role || 'user'
                            });
                        } else if (response.status === 307 || response.type === 'opaqueredirect') {
                            setError('Authentication redirected unexpectedly. Please try again.');
                        } else {
                            setError('Invalid credentials. Try: admin, developer, or data-scientist');
                        }
                    } catch (err) {
                        setError('Authentication failed. Please check your connection.');
                    } finally {
                        setLoading(false);
                    }
                };

                return (
                    <div className="min-h-screen flex flex-col justify-center py-12 px-4 sm:px-6 lg:px-8">
                        <div className="sm:mx-auto sm:w-full sm:max-w-md">
                            <div className="flex justify-center">
                                <Shield className="h-12 w-12 text-orange-500" />
                            </div>
                            <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
                                BASE Platform
                            </h2>
                            <p className="mt-2 text-center text-sm text-gray-600">
                                Secure Vault Authentication Required
                            </p>
                        </div>

                        <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
                            <div className="card p-6">
                                <form onSubmit={handleLogin} className="space-y-6">
                                    <div>
                                        <label htmlFor="vault-username" className="block text-sm font-medium text-gray-700 mb-2">
                                            <User className="inline w-4 h-4 mr-2" />
                                            Username
                                        </label>
                                        <input
                                            id="vault-username"
                                            type="text"
                                            value={username}
                                            onChange={(e) => setUsername(e.target.value)}
                                            placeholder="admin, developer, or data-scientist"
                                            required
                                            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                                        />
                                    </div>
                                    
                                    <div>
                                        <label htmlFor="vault-password" className="block text-sm font-medium text-gray-700 mb-2">
                                            <Shield className="inline w-4 h-4 mr-2" />
                                            Password
                                        </label>
                                        <input
                                            id="vault-password"
                                            type="password"
                                            value={password}
                                            onChange={(e) => setPassword(e.target.value)}
                                            placeholder="Enter your Vault password"
                                            required
                                            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                                        />
                                    </div>

                                    {error && (
                                        <div className="text-red-600 text-sm bg-red-50 p-3 rounded-md border border-red-200">
                                            {error}
                                        </div>
                                    )}

                                    <button
                                        type="submit"
                                        className="w-full btn btn-primary bg-orange-600 hover:bg-orange-700 text-white flex items-center justify-center"
                                        disabled={loading}
                                    >
                                        {loading ? (
                                            <>
                                                <Loader2 className="animate-spin mr-2 h-4 w-4" />
                                                Authenticating...
                                            </>
                                        ) : (
                                            <>
                                                <Shield className="mr-2 h-4 w-4" />
                                                Sign In with Vault
                                            </>
                                        )}
                                    </button>
                                </form>
                                
                                <div className="mt-6 text-center">
                                    <small className="text-gray-500">
                                        Powered by HashiCorp Vault Authentication
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                );
            }

            function ServiceCard({ service, userInfo }) {
                const [status] = useState('healthy');
                const Icon = service.icon;

                return (
                    <div className="card p-6 hover:shadow-lg transition-all duration-300 hover:-translate-y-1">
                        <div className="text-center">
                            <Icon className={`h-12 w-12 mx-auto mb-4 ${service.color}`} />
                            <h3 className="text-lg font-semibold mb-2 flex items-center justify-center gap-2">
                                {service.name}
                                <div className={`w-2 h-2 rounded-full ${
                                    status === 'healthy' ? 'bg-green-500' : 
                                    status === 'unhealthy' ? 'bg-red-500' : 'bg-yellow-500'
                                }`} />
                            </h3>
                            <p className="text-gray-600 mb-4">{service.description}</p>
                            <div className="space-y-3">
                                <span className="badge border border-gray-200 bg-gray-50 text-gray-700">
                                    Namespace: {service.namespace}
                                </span>
                                <br />
                                <a 
                                    href={service.url} 
                                    target="_blank" 
                                    rel="noopener noreferrer"
                                    className="btn btn-outline w-full inline-flex items-center justify-center"
                                >
                                    <ExternalLink className="mr-2 h-4 w-4" />
                                    Open Service
                                </a>
                            </div>
                        </div>
                    </div>
                );
            }

            function App() {
                const [userInfo, setUserInfo] = useState(null);
                const [loading, setLoading] = useState(true);

                useEffect(() => {
                    const token = localStorage.getItem('vault_token');
                    const savedUserInfo = localStorage.getItem('user_info');

                    if (token && savedUserInfo) {
                        fetch('/vault/v1/auth/token/lookup-self', {
                            headers: { 'X-Vault-Token': token },
                            redirect: 'manual'
                        })
                        .then(response => {
                            if (response.ok) {
                                setUserInfo(JSON.parse(savedUserInfo));
                            } else {
                                localStorage.removeItem('vault_token');
                                localStorage.removeItem('user_info');
                            }
                        })
                        .catch(() => {
                            localStorage.removeItem('vault_token');
                            localStorage.removeItem('user_info');
                        })
                        .finally(() => setLoading(false));
                    } else {
                        setLoading(false);
                    }
                }, []);

                const handleLogin = (userData) => {
                    setUserInfo(userData);
                };

                const handleLogout = () => {
                    localStorage.removeItem('vault_token');
                    localStorage.removeItem('user_info');
                    setUserInfo(null);
                };

                if (loading) {
                    return (
                        <div className="min-h-screen flex items-center justify-center">
                            <div className="text-center">
                                <Loader2 className="h-8 w-8 animate-spin mx-auto text-orange-500" />
                                <h4 className="mt-4 text-lg font-medium">Checking authentication...</h4>
                                <p className="text-gray-500">Verifying Vault token</p>
                            </div>
                        </div>
                    );
                }

                if (!userInfo) {
                    return <VaultLogin onLogin={handleLogin} />;
                }

                return (
                    <div className="min-h-screen bg-gray-50">
                        {/* Navigation */}
                        <nav className="bg-white shadow-sm border-b">
                            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                                <div className="flex justify-between h-16">
                                    <div className="flex items-center">
                                        <Shield className="h-8 w-8 text-orange-500 mr-3" />
                                        <h1 className="text-xl font-semibold text-gray-900">BASE Platform</h1>
                                    </div>
                                    <div className="flex items-center space-x-4">
                                        <span className="text-sm text-gray-700 flex items-center">
                                            <User className="w-4 h-4 mr-1" />
                                            Welcome, {userInfo.username}
                                        </span>
                                        <button 
                                            onClick={handleLogout}
                                            className="btn btn-outline text-sm"
                                        >
                                            <LogOut className="mr-2 h-4 w-4" />
                                            Logout
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </nav>

                        {/* Main Content */}
                        <main className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
                            <div className="text-center mb-12">
                                <h1 className="text-4xl font-bold text-gray-900 mb-4">
                                    Enterprise Data Platform Services
                                </h1>
                                <p className="text-xl text-gray-600 mb-6">
                                    Authenticated access to your platform services
                                </p>
                                <div className="flex justify-center space-x-2">
                                    <span className="badge badge-success">
                                        <Shield className="w-3 h-3 mr-1" />
                                        Authenticated
                                    </span>
                                    <span className="badge badge-info">
                                        Platform Cluster
                                    </span>
                                    <span className="badge badge-warning">
                                        AWS us-east-1
                                    </span>
                                </div>
                            </div>

                            {/* Services Grid */}
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
                                {services.map((service, index) => (
                                    <ServiceCard key={index} service={service} userInfo={userInfo} />
                                ))}
                            </div>

                            {/* Session Information */}
                            <div className="card p-6">
                                <h2 className="text-lg font-semibold mb-4 flex items-center">
                                    <User className="mr-2 h-5 w-5" />
                                    Session Information
                                </h2>
                                <div className="grid grid-cols-1 md:grid-cols-4 gap-4 text-sm">
                                    <div>
                                        <strong>User:</strong> {userInfo.username}
                                    </div>
                                    <div>
                                        <strong>Role:</strong> {userInfo.role}
                                    </div>
                                    <div>
                                        <strong>Policies:</strong> {userInfo.policies?.join(', ')}
                                    </div>
                                    <div>
                                        <strong>Environment:</strong> Development
                                    </div>
                                </div>
                            </div>
                        </main>
                    </div>
                );
            }
            
            ReactDOM.render(<App />, document.getElementById('root'));
        </script>
    </body>
    </html>