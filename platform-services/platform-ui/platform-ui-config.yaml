apiVersion: v1
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>BASE Platform Dashboard</title>
        <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
        <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
        <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
        <style>
            body { 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            }
            .auth-container { 
                min-height: 100vh; 
                display: flex; 
                align-items: center; 
                justify-content: center; 
            }
            .dashboard-container { 
                min-height: 100vh; 
                padding: 2rem 0; 
            }
            .auth-card, .service-card { 
                border: none; 
                border-radius: 15px; 
                transition: all 0.3s ease;
                backdrop-filter: blur(10px);
                background: rgba(255, 255, 255, 0.1);
                border: 1px solid rgba(255, 255, 255, 0.2);
            }
            .auth-card {
                max-width: 400px;
                width: 100%;
            }
            .service-card:hover { 
                transform: translateY(-10px); 
                box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            }
            .service-icon { 
                font-size: 3rem; 
                margin-bottom: 1rem; 
            }
            .status-indicator { 
                width: 12px; 
                height: 12px; 
                border-radius: 50%; 
                display: inline-block; 
                margin-left: 8px;
            }
            .status-healthy { background-color: #28a745; }
            .status-unhealthy { background-color: #dc3545; }
            .status-unknown { background-color: #ffc107; }
        </style>
    </head>
    <body>
        <div id="root"></div>
        
        <script type="text/babel">
            const { useState, useEffect } = React;
            
            const services = [
                {
                    name: "ArgoCD",
                    description: "GitOps Continuous Deployment",
                    icon: "fas fa-rocket",
                    url: "/argocd",
                    namespace: "argocd",
                    color: "text-info"
                },
                {
                    name: "Vault",
                    description: "Secrets Management & Authentication",
                    icon: "fas fa-vault",
                    url: "/vault",
                    namespace: "vault",
                    color: "text-warning"
                },
                {
                    name: "Airflow",
                    description: "Workflow Orchestration",
                    icon: "fas fa-wind",
                    url: "/airflow",
                    namespace: "airflow", 
                    color: "text-primary"
                },
                {
                    name: "MLflow",
                    description: "ML Lifecycle Management",
                    icon: "fas fa-brain",
                    url: "/mlflow",
                    namespace: "mlflow",
                    color: "text-success"
                },
                {
                    name: "Grafana",
                    description: "Monitoring & Observability",
                    icon: "fas fa-chart-line",
                    url: "/grafana",
                    namespace: "monitoring",
                    color: "text-danger"
                },
                {
                    name: "Prometheus",
                    description: "Metrics Collection",
                    icon: "fas fa-tachometer-alt",
                    url: "/prometheus",
                    namespace: "monitoring",
                    color: "text-warning"
                }
            ];
            
            function LoginForm({ onLogin }) {
                const [username, setUsername] = useState('');
                const [password, setPassword] = useState('');
                const [loading, setLoading] = useState(false);
                const [error, setError] = useState('');
                
                const handleLogin = async (e) => {
                    e.preventDefault();
                    setLoading(true);
                    setError('');
                    
                    try {
                        const response = await fetch('/vault/v1/auth/userpass/login/' + username, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ password }),
                            redirect: 'manual'
                        });
                        
                        if (response.ok) {
                            const data = await response.json();
                            localStorage.setItem('vault_token', data.auth.client_token);
                            localStorage.setItem('user_info', JSON.stringify({ 
                                username, 
                                policies: data.auth.policies,
                                role: data.auth.metadata?.role || 'user'
                            }));
                            onLogin({ 
                                username, 
                                token: data.auth.client_token, 
                                policies: data.auth.policies,
                                role: data.auth.metadata?.role || 'user'
                            });
                        } else if (response.status === 307 || response.type === 'opaqueredirect') {
                            setError('Authentication redirected unexpectedly. Please try again.');
                        } else {
                            setError('Invalid credentials. Try: admin, developer, or data-scientist');
                        }
                    } catch (err) {
                        setError('Authentication failed. Please check your connection.');
                    } finally {
                        setLoading(false);
                    }
                };
                
                return (
                    <div className="auth-container">
                        <div className="auth-card text-white p-4">
                            <div className="text-center mb-4">
                                <i className="fas fa-shield-alt fa-4x text-warning mb-3"></i>
                                <h2>BASE Platform</h2>
                                <p className="text-white-50">Secure Authentication Required</p>
                            </div>
                            
                            <form onSubmit={handleLogin}>
                                <div className="mb-3">
                                    <label className="form-label">
                                        <i className="fas fa-user me-2"></i>Username
                                    </label>
                                    <input 
                                        type="text" 
                                        className="form-control" 
                                        value={username}
                                        onChange={(e) => setUsername(e.target.value)}
                                        placeholder="admin, developer, or data-scientist"
                                        required
                                    />
                                </div>
                                <div className="mb-3">
                                    <label className="form-label">
                                        <i className="fas fa-lock me-2"></i>Password
                                    </label>
                                    <input 
                                        type="password" 
                                        className="form-control" 
                                        value={password}
                                        onChange={(e) => setPassword(e.target.value)}
                                        placeholder="Enter your Vault password"
                                        required
                                    />
                                </div>
                                {error && (
                                    <div className="alert alert-danger" role="alert">
                                        <i className="fas fa-exclamation-triangle me-2"></i>
                                        {error}
                                    </div>
                                )}
                                <button 
                                    type="submit" 
                                    className="btn btn-warning w-100 mb-3"
                                    disabled={loading}
                                >
                                    {loading ? (
                                        <>
                                            <i className="fas fa-spinner fa-spin me-2"></i>
                                            Authenticating...
                                        </>
                                    ) : (
                                        <>
                                            <i className="fas fa-sign-in-alt me-2"></i>
                                            Sign In with Vault
                                        </>
                                    )}
                                </button>
                            </form>
                            
                            <div className="text-center">
                                <small className="text-white-50">
                                    <i className="fas fa-info-circle me-1"></i>
                                    Powered by HashiCorp Vault OIDC
                                </small>
                            </div>
                        </div>
                    </div>
                );
            }
            
            function ServiceCard({ service, userInfo }) {
                const [status, setStatus] = useState('unknown');
                
                useEffect(() => {
                    const checkHealth = async () => {
                        setStatus('healthy'); // Simplified for demo
                    };
                    checkHealth();
                }, []);
                
                return (
                    <div className="col-md-6 col-lg-4 mb-4">
                        <div className="card service-card h-100 text-white">
                            <div className="card-body text-center">
                                <i className={`${service.icon} service-icon ${service.color}`}></i>
                                <h5 className="card-title">
                                    {service.name}
                                    <span className={`status-indicator status-${status}`}></span>
                                </h5>
                                <p className="card-text">{service.description}</p>
                                <p className="small text-muted">Namespace: {service.namespace}</p>
                                <a 
                                    href={service.url} 
                                    className="btn btn-outline-light"
                                    target="_blank"
                                >
                                    <i className="fas fa-external-link-alt me-2"></i>
                                    Open Service
                                </a>
                            </div>
                        </div>
                    </div>
                );
            }
            
            function Dashboard({ userInfo, onLogout }) {
                return (
                    <div className="dashboard-container">
                        <nav className="navbar navbar-expand-lg mb-4" style={{background: 'rgba(255,255,255,0.1)', backdropFilter: 'blur(10px)'}}>
                            <div className="container">
                                <span className="navbar-brand text-white">
                                    <i className="fas fa-layer-group me-2"></i>
                                    BASE Platform
                                </span>
                                <div className="navbar-nav ms-auto">
                                    <span className="navbar-text text-white me-3">
                                        <i className="fas fa-user me-1"></i>
                                        Welcome, {userInfo.username}
                                    </span>
                                    <button className="btn btn-outline-light btn-sm" onClick={onLogout}>
                                        <i className="fas fa-sign-out-alt me-1"></i>
                                        Logout
                                    </button>
                                </div>
                            </div>
                        </nav>
                        
                        <div className="container">
                            <div className="row mb-5">
                                <div className="col-12 text-center">
                                    <h1 className="display-4 text-white mb-3">
                                        Enterprise Data Platform Services
                                    </h1>
                                    <p className="lead text-white-50">
                                        Authenticated access to your platform services
                                    </p>
                                    <div className="badge bg-success me-2">
                                        <i className="fas fa-shield-check me-1"></i>
                                        Authenticated
                                    </div>
                                    <div className="badge bg-info me-2">
                                        <i className="fas fa-server me-1"></i>
                                        Platform Cluster
                                    </div>
                                    <div className="badge bg-warning">
                                        <i className="fas fa-cloud me-1"></i>
                                        AWS us-east-1
                                    </div>
                                </div>
                            </div>
                            
                            <div className="row">
                                {services.map((service, index) => (
                                    <ServiceCard key={index} service={service} userInfo={userInfo} />
                                ))}
                            </div>
                            
                            <div className="row mt-5">
                                <div className="col-12">
                                    <div className="card service-card text-white">
                                        <div className="card-body">
                                            <h5 className="card-title">
                                                <i className="fas fa-user-circle me-2"></i>
                                                Session Information
                                            </h5>
                                            <div className="row">
                                                <div className="col-md-3">
                                                    <strong>User:</strong> {userInfo.username}
                                                </div>
                                                <div className="col-md-3">
                                                    <strong>Role:</strong> {userInfo.role}
                                                </div>
                                                <div className="col-md-3">
                                                    <strong>Policies:</strong> {userInfo.policies?.join(', ')}
                                                </div>
                                                <div className="col-md-3">
                                                    <strong>Environment:</strong> Development
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                );
            }
            
            function App() {
                const [userInfo, setUserInfo] = useState(null);
                const [loading, setLoading] = useState(true);
                
                useEffect(() => {
                    const token = localStorage.getItem('vault_token');
                    const savedUserInfo = localStorage.getItem('user_info');
                    
                    if (token && savedUserInfo) {
                        fetch('/vault/v1/auth/token/lookup-self', {
                            headers: { 'X-Vault-Token': token },
                            redirect: 'manual'
                        })
                        .then(response => {
                            if (response.ok) {
                                setUserInfo(JSON.parse(savedUserInfo));
                            } else {
                                localStorage.removeItem('vault_token');
                                localStorage.removeItem('user_info');
                            }
                        })
                        .catch(() => {
                            localStorage.removeItem('vault_token');
                            localStorage.removeItem('user_info');
                        })
                        .finally(() => setLoading(false));
                    } else {
                        setLoading(false);
                    }
                }, []);
                
                const handleLogin = (userData) => {
                    setUserInfo(userData);
                };
                
                const handleLogout = () => {
                    localStorage.removeItem('vault_token');
                    localStorage.removeItem('user_info');
                    setUserInfo(null);
                };
                
                if (loading) {
                    return (
                        <div className="auth-container">
                            <div className="text-center text-white">
                                <i className="fas fa-spinner fa-spin fa-3x mb-3 text-warning"></i>
                                <h4>Checking authentication...</h4>
                                <p className="text-white-50">Verifying Vault token</p>
                            </div>
                        </div>
                    );
                }
                
                if (!userInfo) {
                    return <LoginForm onLogin={handleLogin} />;
                }
                
                return <Dashboard userInfo={userInfo} onLogout={handleLogout} />;
            }
            
            ReactDOM.render(<App />, document.getElementById('root'));
        </script>
    </body>
    </html>
kind: ConfigMap
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","data":{"index.html":"\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003ctitle\u003eBASE Platform Dashboard\u003c/title\u003e\n    \u003cscript src=\"https://unpkg.com/react@18/umd/react.production.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://unpkg.com/react-dom@18/umd/react-dom.production.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://unpkg.com/@babel/standalone/babel.min.js\"\u003e\u003c/script\u003e\n    \u003clink href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\u003e\n    \u003clink href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\" rel=\"stylesheet\"\u003e\n    \u003cstyle\u003e\n        body { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }\n        .dashboard-container { min-height: 100vh; padding: 2rem 0; }\n        .service-card { \n            border: none; \n            border-radius: 15px; \n            transition: all 0.3s ease;\n            backdrop-filter: blur(10px);\n            background: rgba(255, 255, 255, 0.1);\n            border: 1px solid rgba(255, 255, 255, 0.2);\n        }\n        .service-card:hover { \n            transform: translateY(-10px); \n            box-shadow: 0 10px 30px rgba(0,0,0,0.3);\n        }\n        .service-icon { font-size: 3rem; margin-bottom: 1rem; }\n        .status-indicator { \n            width: 12px; \n            height: 12px; \n            border-radius: 50%; \n            display: inline-block; \n            margin-left: 8px;\n        }\n        .status-healthy { background-color: #28a745; }\n        .status-unhealthy { background-color: #dc3545; }\n        .status-unknown { background-color: #ffc107; }\n    \u003c/style\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n    \u003cdiv id=\"root\"\u003e\u003c/div\u003e\n    \n    \u003cscript type=\"text/babel\"\u003e\n        const { useState, useEffect } = React;\n        \n        const services = [\n            {\n                name: \"ArgoCD\",\n                description: \"GitOps Continuous Deployment\",\n                icon: \"fas fa-rocket\",\n                url: \"/argocd\",\n                namespace: \"argocd\",\n                color: \"text-info\"\n            },\n            {\n                name: \"Airflow\",\n                description: \"Workflow Orchestration\",\n                icon: \"fas fa-wind\",\n                url: \"/airflow\",\n                namespace: \"airflow\", \n                color: \"text-primary\"\n            },\n            {\n                name: \"MLflow\",\n                description: \"ML Lifecycle Management\",\n                icon: \"fas fa-brain\",\n                url: \"/mlflow\",\n                namespace: \"mlflow\",\n                color: \"text-success\"\n            },\n            {\n                name: \"Kubeflow\",\n                description: \"ML Workflows on Kubernetes\",\n                icon: \"fas fa-cogs\",\n                url: \"/kubeflow\",\n                namespace: \"kubeflow\",\n                color: \"text-warning\"\n            },\n            {\n                name: \"Grafana\",\n                description: \"Monitoring \u0026 Observability\",\n                icon: \"fas fa-chart-line\",\n                url: \"/grafana\",\n                namespace: \"monitoring\",\n                color: \"text-danger\"\n            },\n            {\n                name: \"Prometheus\",\n                description: \"Metrics Collection\",\n                icon: \"fas fa-tachometer-alt\",\n                url: \"/prometheus\",\n                namespace: \"monitoring\",\n                color: \"text-warning\"\n            },\n            {\n                name: \"Istio\",\n                description: \"Service Mesh \u0026 Traffic Management\",\n                icon: \"fas fa-network-wired\",\n                url: \"/istio\",\n                namespace: \"istio-system\",\n                color: \"text-info\"\n            },\n            {\n                name: \"Vault\",\n                description: \"Secrets Management\",\n                icon: \"fas fa-vault\",\n                url: \"/vault\",\n                namespace: \"vault\",\n                color: \"text-warning\"\n            },\n            {\n                name: \"Crossplane\",\n                description: \"Infrastructure as Code\",\n                icon: \"fas fa-layer-group\",\n                url: \"/crossplane\",\n                namespace: \"crossplane-system\",\n                color: \"text-secondary\"\n            }\n        ];\n        \n        function ServiceCard({ service }) {\n            const [status, setStatus] = useState('unknown');\n            \n            useEffect(() =\u003e {\n                // Simulate health check\n                const checkHealth = async () =\u003e {\n                    try {\n                        const response = await fetch(`/api/health/${service.namespace}`);\n                        setStatus(response.ok ? 'healthy' : 'unhealthy');\n                    } catch (error) {\n                        setStatus('unknown');\n                    }\n                };\n                \n                checkHealth();\n                const interval = setInterval(checkHealth, 30000);\n                return () =\u003e clearInterval(interval);\n            }, [service.namespace]);\n            \n            return (\n                \u003cdiv className=\"col-md-6 col-lg-4 mb-4\"\u003e\n                    \u003cdiv className=\"card service-card h-100 text-white\"\u003e\n                        \u003cdiv className=\"card-body text-center\"\u003e\n                            \u003ci className={`${service.icon} service-icon ${service.color}`}\u003e\u003c/i\u003e\n                            \u003ch5 className=\"card-title\"\u003e\n                                {service.name}\n                                \u003cspan className={`status-indicator status-${status}`}\u003e\u003c/span\u003e\n                            \u003c/h5\u003e\n                            \u003cp className=\"card-text\"\u003e{service.description}\u003c/p\u003e\n                            \u003cp className=\"small text-muted\"\u003eNamespace: {service.namespace}\u003c/p\u003e\n                            \u003ca href={service.url} className=\"btn btn-outline-light\"\u003e\n                                \u003ci className=\"fas fa-external-link-alt me-2\"\u003e\u003c/i\u003e\n                                Open Service\n                            \u003c/a\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            );\n        }\n        \n        function Dashboard() {\n            const [clusterInfo, setClusterInfo] = useState({});\n            \n            useEffect(() =\u003e {\n                // Get cluster information\n                fetch('/api/cluster-info')\n                    .then(response =\u003e response.json())\n                    .then(data =\u003e setClusterInfo(data))\n                    .catch(error =\u003e console.error('Failed to fetch cluster info:', error));\n            }, []);\n            \n            return (\n                \u003cdiv className=\"dashboard-container\"\u003e\n                    \u003cdiv className=\"container\"\u003e\n                        \u003cdiv className=\"row mb-5\"\u003e\n                            \u003cdiv className=\"col-12 text-center\"\u003e\n                                \u003ch1 className=\"display-4 text-white mb-3\"\u003e\n                                    \u003ci className=\"fas fa-layer-group me-3\"\u003e\u003c/i\u003e\n                                    BASE Platform Dashboard\n                                \u003c/h1\u003e\n                                \u003cp className=\"lead text-white-50\"\u003e\n                                    Unified access to your enterprise data platform services\n                                \u003c/p\u003e\n                                \u003cdiv className=\"badge bg-success me-2\"\u003e\n                                    \u003ci className=\"fas fa-server me-1\"\u003e\u003c/i\u003e\n                                    Platform Cluster\n                                \u003c/div\u003e\n                                \u003cdiv className=\"badge bg-info me-2\"\u003e\n                                    \u003ci className=\"fas fa-database me-1\"\u003e\u003c/i\u003e\n                                    Base Cluster\n                                \u003c/div\u003e\n                                \u003cdiv className=\"badge bg-warning\"\u003e\n                                    \u003ci className=\"fas fa-cloud me-1\"\u003e\u003c/i\u003e\n                                    AWS us-east-1\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \n                        \u003cdiv className=\"row\"\u003e\n                            {services.map((service, index) =\u003e (\n                                \u003cServiceCard key={index} service={service} /\u003e\n                            ))}\n                        \u003c/div\u003e\n                        \n                        \u003cdiv className=\"row mt-5\"\u003e\n                            \u003cdiv className=\"col-12\"\u003e\n                                \u003cdiv className=\"card service-card text-white\"\u003e\n                                    \u003cdiv className=\"card-body\"\u003e\n                                        \u003ch5 className=\"card-title\"\u003e\n                                            \u003ci className=\"fas fa-info-circle me-2\"\u003e\u003c/i\u003e\n                                            Platform Information\n                                        \u003c/h5\u003e\n                                        \u003cdiv className=\"row\"\u003e\n                                            \u003cdiv className=\"col-md-4\"\u003e\n                                                \u003cstrong\u003eEnvironment:\u003c/strong\u003e Development\n                                            \u003c/div\u003e\n                                            \u003cdiv className=\"col-md-4\"\u003e\n                                                \u003cstrong\u003eRegion:\u003c/strong\u003e us-east-1\n                                            \u003c/div\u003e\n                                            \u003cdiv className=\"col-md-4\"\u003e\n                                                \u003cstrong\u003eDeployment:\u003c/strong\u003e GitOps\n                                            \u003c/div\u003e\n                                        \u003c/div\u003e\n                                    \u003c/div\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            );\n        }\n        \n        ReactDOM.render(\u003cDashboard /\u003e, document.getElementById('root'));\n    \u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"},"kind":"ConfigMap","metadata":{"annotations":{},"name":"platform-ui-config","namespace":"platform-ui"}}
  creationTimestamp: "2025-08-17T01:31:57Z"
  name: platform-ui-config
  namespace: platform-ui
  resourceVersion: "33329"
  uid: 4ef56895-c8be-482b-a731-9b8b094a5393
