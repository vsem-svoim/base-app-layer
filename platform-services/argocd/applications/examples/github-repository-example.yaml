# Example ArgoCD Application Configuration for GitHub Repository Integration
# This shows how to properly reference GitHub repositories in ArgoCD applications

apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: example-github-app
  namespace: argocd
  labels:
    app.kubernetes.io/name: example-app
    app.kubernetes.io/component: deployment
    app.kubernetes.io/part-of: github-integration-example
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  project: default  # or your specific project
  
  # GitHub Repository Configuration
  source:
    repoURL: https://github.com/vsem-svoim/base-app-layer.git
    path: data_ingestion/agents  # Path within repository
    targetRevision: main  # Can be branch, tag, or commit SHA
    
    # Optional: Directory-specific configuration
    directory:
      recurse: true
      include: "*.yaml"
      exclude: "*.tmp"
    
    # Optional: Kustomize configuration
    # kustomize:
    #   namePrefix: github-
    #   commonLabels:
    #     source: github
    #   images:
    #     - name: myapp
    #       newTag: v1.2.3
    
    # Optional: Helm configuration
    # helm:
    #   valueFiles:
    #     - values.yaml
    #   parameters:
    #     - name: image.tag
    #       value: latest
  
  # Deployment Configuration  
  destination:
    server: https://kubernetes.default.svc
    namespace: example-namespace
  
  # Sync Policy
  syncPolicy:
    automated:
      prune: true      # Remove resources not in git
      selfHeal: true   # Automatically sync when drift detected
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - ApplyOutOfSyncOnly=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  
  # Revision History
  revisionHistoryLimit: 10
  
  # Ignore Differences (optional)
  # ignoreDifferences:
  #   - group: apps
  #     kind: Deployment
  #     jsonPointers:
  #       - /spec/replicas

---
# Example showing multiple source configuration (ArgoCD 2.6+)
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: multi-source-example
  namespace: argocd
  labels:
    app.kubernetes.io/name: multi-source-app
    example: multi-source
spec:
  project: default
  
  # Multiple sources (requires ArgoCD 2.6+)
  sources:
    - repoURL: https://github.com/vsem-svoim/base-app-layer.git
      path: data_ingestion/configs
      targetRevision: main
    - repoURL: https://github.com/vsem-svoim/base-app-layer.git  
      path: data_ingestion/agents
      targetRevision: main
      
  destination:
    server: https://kubernetes.default.svc
    namespace: multi-source-example
    
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true

---
# Repository Secret Reference Example
# This shows how ArgoCD automatically uses repository credentials
apiVersion: v1
kind: ConfigMap
metadata:
  name: github-integration-notes
  namespace: argocd
data:
  integration-info.md: |
    # GitHub Integration with ArgoCD
    
    ## Repository Credentials
    ArgoCD will automatically use repository credentials when:
    1. The repository URL matches a configured repository secret
    2. The secret has label: argocd.argoproj.io/secret-type=repository
    3. The secret contains the required authentication fields
    
    ## Current Configuration
    - Repository URL: https://github.com/vsem-svoim/base-app-layer.git
    - Authentication: Token-based (GitHub Personal Access Token)
    - Secrets: github-repo-creds, base-app-layer-repo
    
    ## Usage in Applications
    Applications reference the repository URL in their source.repoURL field.
    ArgoCD automatically matches this URL to the configured repository secret.
    
    ## Security Best Practices
    - Use minimal permissions for GitHub tokens
    - Rotate tokens regularly
    - Monitor repository access in ArgoCD UI
    - Use GitHub Apps for enhanced security (future enhancement)