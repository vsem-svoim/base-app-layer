apiVersion: apps/v1
kind: Deployment
metadata:
  name: base-data-quality-testing-dashboard
  namespace: base-data-quality
  labels:
    app.kubernetes.io/name: data-quality-testing-dashboard
    app.kubernetes.io/component: web-ui
    app.kubernetes.io/part-of: base-platform
    app.kubernetes.io/version: "1.0.0"
    base.platform/module: data-quality
    base.platform/layer: testing
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: data-quality-testing-dashboard
      base.platform/module: data-quality
  
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  
  template:
    metadata:
      labels:
        app.kubernetes.io/name: data-quality-testing-dashboard
        app.kubernetes.io/component: web-ui
        base.platform/module: data-quality
        base.platform/layer: testing
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: base-data-quality-testing-sa
      
      # Use platform system nodes
      nodeSelector:
        node-type: platform_system
      
      tolerations:
      - key: "platform-system"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      
      containers:
      - name: dashboard
        image: base-platform/data-quality-testing-dashboard:latest
        imagePullPolicy: Always
        
        # Container security
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Environment variables
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: DASHBOARD_PORT
          value: "8080"
        - name: STREAMLIT_SERVER_PORT
          value: "8080"
        - name: STREAMLIT_SERVER_ADDRESS
          value: "0.0.0.0"
        - name: STREAMLIT_BROWSER_GATHER_USAGE_STATS
          value: "false"
        - name: PYTHONPATH
          value: "/app"
        
        # Resource requirements
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "1000m"
            memory: "2Gi"
        
        # Ports
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        
        # Volume mounts
        volumeMounts:
        - name: testing-config
          mountPath: /app/config
          readOnly: true
        - name: test-results
          mountPath: /app/results
          readOnly: false
        - name: temp-storage
          mountPath: /tmp
        - name: cache-storage
          mountPath: /app/.streamlit
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        # Startup probe for slower initialization
        startupProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      
      # Volumes
      volumes:
      - name: testing-config
        configMap:
          name: base-data-quality-testing-config
      - name: test-results
        persistentVolumeClaim:
          claimName: base-data-quality-testing-results-pvc
      - name: temp-storage
        emptyDir: {}
      - name: cache-storage
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: base-data-quality-testing-dashboard
  namespace: base-data-quality
  labels:
    app.kubernetes.io/name: data-quality-testing-dashboard
    app.kubernetes.io/component: web-ui
    base.platform/module: data-quality
    base.platform/layer: testing
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  selector:
    app.kubernetes.io/name: data-quality-testing-dashboard
    base.platform/module: data-quality

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: base-data-quality-testing-results-pvc
  namespace: base-data-quality
  labels:
    app.kubernetes.io/name: data-quality-testing-dashboard
    app.kubernetes.io/component: storage
    base.platform/module: data-quality
    base.platform/layer: testing
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: efs-sc

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: base-data-quality-testing-dashboard-ingress
  namespace: base-data-quality
  labels:
    app.kubernetes.io/name: data-quality-testing-dashboard
    app.kubernetes.io/component: ingress
    base.platform/module: data-quality
    base.platform/layer: testing
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - quality-testing.base-platform.dev
    secretName: quality-testing-tls
  rules:
  - host: quality-testing.base-platform.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: base-data-quality-testing-dashboard
            port:
              number: 80

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: base-data-quality-testing-dashboard-netpol
  namespace: base-data-quality
  labels:
    app.kubernetes.io/name: data-quality-testing-dashboard
    app.kubernetes.io/component: security
    base.platform/module: data-quality
    base.platform/layer: testing
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: data-quality-testing-dashboard
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Allow traffic from nginx ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  
  # Allow traffic from monitoring namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
  
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # Allow communication with data quality services
  - to:
    - podSelector:
        matchLabels:
          base.platform/module: data-quality
    ports:
    - protocol: TCP
      port: 8080
  
  # Allow access to Kubernetes API
  - to: []
    ports:
    - protocol: TCP
      port: 443

---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: base-data-quality-testing-dashboard-hpa
  namespace: base-data-quality
  labels:
    app.kubernetes.io/name: data-quality-testing-dashboard
    app.kubernetes.io/component: autoscaling
    base.platform/module: data-quality
    base.platform/layer: testing
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: base-data-quality-testing-dashboard
  
  minReplicas: 2
  maxReplicas: 5
  
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60

---
# ServiceMonitor for Prometheus monitoring
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: base-data-quality-testing-dashboard-monitor
  namespace: base-data-quality
  labels:
    app.kubernetes.io/name: data-quality-testing-dashboard
    app.kubernetes.io/component: monitoring
    base.platform/module: data-quality
    base.platform/layer: testing
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: data-quality-testing-dashboard
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s