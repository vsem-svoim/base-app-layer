apiVersion: v1
kind: ServiceAccount
metadata:
  name: base-data-validator-sa
  namespace: base-data-quality
  labels:
    app.kubernetes.io/name: base-data-validator
    app.kubernetes.io/component: quality
    app.kubernetes.io/part-of: base-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: base-data-quality-agent-data-validator
  namespace: base-data-quality
  labels:
    app.kubernetes.io/name: base-data-validator
    app.kubernetes.io/component: quality
    app.kubernetes.io/part-of: base-system
    base.io/category: data_quality
    base.io/type: agent
    base.io/function: data-validator
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: base-data-validator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: base-data-validator
        app.kubernetes.io/component: quality
        app.kubernetes.io/part-of: base-system
        base.io/category: data_quality
        base.io/type: agent
    spec:
      serviceAccountName: base-data-validator-sa
      nodeSelector:
        NodeGroup: base-data-services
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: data-validator
        image: python:3.13.7-slim
        imagePullPolicy: Always
        command: ["/bin/sh"]
        args: ["-c", "echo 'Base Data Quality Validator Agent Starting...' && python -m http.server 8080 --bind 0.0.0.0"]
        ports:
        - name: http-metrics
          containerPort: 9090
          protocol: TCP
        - name: http-health
          containerPort: 8080
          protocol: TCP
        env:
        - name: LOG_LEVEL
          value: "info"
        - name: LOG_FORMAT
          value: "json"
        - name: METRICS_PORT
          value: "9090"
        - name: HEALTH_PORT
          value: "8080"
        - name: VALIDATION_BATCH_SIZE
          value: "10000"
        - name: QUALITY_THRESHOLD
          value: "0.85"
        - name: PROMETHEUS_ENABLED
          value: "true"
        - name: JAEGER_ENABLED
          value: "true"
        resources:
          requests:
            cpu: "1"
            memory: "2Gi"
            ephemeral-storage: "5Gi"
          limits:
            cpu: "4"
            memory: "8Gi"
            ephemeral-storage: "20Gi"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: secrets-volume
          mountPath: /app/secrets
          readOnly: true
        - name: temp-storage
          mountPath: /app/temp
      volumes:
      - name: config-volume
        configMap:
          name: base-data-validator-config
      - name: secrets-volume
        secret:
          secretName: base-data-validator-secrets
      - name: temp-storage
        emptyDir:
          sizeLimit: "10Gi"
---
apiVersion: v1
kind: Service
metadata:
  name: base-data-validator-service
  namespace: base-data-quality
  labels:
    app.kubernetes.io/name: base-data-validator
    app.kubernetes.io/component: quality
spec:
  type: ClusterIP
  ports:
  - name: http-metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  - name: http-health
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app.kubernetes.io/name: base-data-validator
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: base-data-validator-config
  namespace: base-data-quality
  labels:
    app.kubernetes.io/name: base-data-validator
    app.kubernetes.io/component: quality
data:
  validator.yaml: |
    # Data Validator Agent Configuration
    validator:
      # Agent Identity and Responsibility
      name: "base-data-validator"
      version: "v2.5.0"
      responsibility: "Real-time and batch data validation with ML-enhanced quality assessment"
      
      # Validation Capabilities
      capabilities:
        validation_types:
          - "schema_validation"
          - "business_rules"
          - "regulatory_compliance"
          - "data_quality_scoring"
          - "anomaly_detection"
          - "cross_reference_validation"
        supported_formats:
          - "JSON"
          - "CSV"
          - "XML"
          - "Avro"
          - "Parquet"
          - "ORC"
        regulatory_frameworks:
          - "MiFID_II"
          - "EMIR"
          - "Dodd_Frank"
          - "Basel_III"
          - "SOX"
          - "GDPR"
        max_concurrent_validations: 1000
        throughput_target: "50000 records/minute"
        
      # Financial Data Validation Rules
      financial_validation:
        market_data:
          price_validation:
            min_price: 0.0001
            max_price: 1000000
            precision_rules:
              equity: 4
              fx: 5
              bond: 6
          quantity_validation:
            min_quantity: 0
            lot_size_compliance: true
        trade_data:
          settlement_cycles:
            equity: ["T+2"]
            bond: ["T+1", "T+2", "T+3"]
            fx: ["T+0", "T+1", "T+2"]
          counterparty_validation:
            lei_required: true
            sanctions_check: true
        reference_data:
          identifier_validation:
            isin: "^[A-Z]{2}[A-Z0-9]{9}[0-9]$"
            cusip: "^[0-9A-Z]{9}$"
            lei: "^[A-Z0-9]{18}[0-9]{2}$"
            
      # Quality Dimensions
      quality_dimensions:
        completeness:
          weight: 0.25
          critical_fields:
            - "instrument_id"
            - "price"
            - "quantity" 
            - "trade_date"
            - "counterparty_id"
        accuracy:
          weight: 0.30
          validation_methods:
            - "format_check"
            - "range_validation"
            - "cross_reference"
            - "business_rules"
        consistency:
          weight: 0.20
          checks:
            - "duplicate_detection"
            - "referential_integrity"
            - "temporal_consistency"
        timeliness:
          weight: 0.15
          thresholds:
            market_data: "30 seconds"
            trade_data: "5 minutes"
            reference_data: "1 hour"
        validity:
          weight: 0.10
          criteria:
            - "schema_compliance"
            - "constraint_validation"
            - "data_type_accuracy"
            
      # Performance and Resource Management  
      performance:
        worker_threads: 8
        memory_limit: "8Gi"
        temp_storage: "20Gi"
        batch_processing:
          batch_size: 10000
          parallel_batches: 4
          timeout: "5 minutes"
        monitoring:
          metrics_interval: 30s
          health_check_interval: 10s
          
      # Integration Points
      integration:
        upstream:
          service: "base-data-ingestion"
          endpoint: "/data/validated"
          format: "structured"
        downstream:
          service: "base-data-storage" 
          endpoint: "/store"
          format: "quality_enhanced"
        ml_models:
          completeness_model: "http://base-data-quality-model-completeness:8501"
          accuracy_model: "http://base-data-quality-model-accuracy:8501"
          anomaly_model: "http://base-data-quality-model-outlier:8501"
        event_bus:
          service: "base-event-coordinator"
          events:
            - "validation_started"
            - "validation_completed"
            - "quality_threshold_breach"
            - "regulatory_violation"
        security:
          service: "base-data-security"
          encryption: "AES-256"
          audit_logging: true
          
      # Error Handling and Resilience
      error_handling:
        retry_policy:
          max_attempts: 3
          backoff: exponential
          base_delay: 1s
          max_delay: 30s
        circuit_breaker:
          failure_threshold: 5
          timeout: 30s
          half_open_requests: 3
        dead_letter_queue:
          enabled: true
          max_size: 10000
          retention: "7d"
          
      # Regulatory Compliance
      compliance:
        mifid_ii:
          transaction_reporting: true
          best_execution: true
          systematic_internaliser: true
        emir:
          derivative_reporting: true
          clearing_obligation: true
          risk_mitigation: true
        dodd_frank:
          swap_reporting: true
          platform_execution: true
          clearing_determination: true
        basel:
          risk_data_aggregation: true
          stress_testing: true
          capital_adequacy: true
          
    # Logging Configuration
    logging:
      level: info
      format: json
      output: stdout
      structured: true
      
    # Monitoring and Observability
    monitoring:
      prometheus:
        enabled: true
        port: 9090
        path: "/metrics"
      jaeger:
        enabled: true
        endpoint: "http://jaeger-collector:14268/api/traces"
      custom_metrics:
        - name: "validation_rate"
          type: "counter"
          description: "Rate of data validation operations"
        - name: "validation_duration"  
          type: "histogram"
          description: "Time taken for validation operations"
        - name: "quality_score"
          type: "gauge"
          description: "Overall data quality score"
        - name: "validation_failure_rate"
          type: "counter" 
          description: "Rate of validation failures"
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: base-data-validator-hpa
  namespace: base-data-quality
  labels:
    app.kubernetes.io/name: base-data-validator
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: base-data-quality-agent-data-validator
  minReplicas: 2
  maxReplicas: 20
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: validation_queue_depth
      target:
        type: AverageValue
        averageValue: "100"
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: base-data-validator-netpol
  namespace: base-data-quality
  labels:
    app.kubernetes.io/name: base-data-validator
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: base-data-validator
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: base-data-ingestion
    - namespaceSelector:
        matchLabels:
          name: base-monitoring
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: base-data-storage
    - namespaceSelector:
        matchLabels:
          name: base-data-security
    ports:
    - protocol: TCP
      port: 8080
  - {} # Allow external regulatory APIs and ML models
---
apiVersion: v1
kind: Secret
metadata:
  name: base-data-validator-secrets
  namespace: base-data-quality
  labels:
    app.kubernetes.io/name: base-data-validator
type: Opaque
stringData:
  # External API credentials
  external_apis.yaml: |
    regulatory_apis:
      lei_validation:
        url: "https://api.gleif.org/api/v1/lei-records"
        api_key: "${LEI_API_KEY}"
      sanctions_check:
        url: "https://api.sanctions.gov/check"
        api_key: "${SANCTIONS_API_KEY}"
      market_data_reference:
        bloomberg:
          api_key: "${BLOOMBERG_API_KEY}"
          secret: "${BLOOMBERG_API_SECRET}"
        refinitiv:
          token: "${REFINITIV_API_TOKEN}"
        
  # Database Connection Strings
  db_connections.yaml: |
    databases:
      postgres_quality:
        host: "${POSTGRES_HOST}"
        port: "${POSTGRES_PORT}"
        database: "${POSTGRES_DB}"
        username: "${POSTGRES_USER}"
        password: "${POSTGRES_PASSWORD}"
        ssl_mode: "require"
      redis_cache:
        host: "${REDIS_HOST}"
        port: "${REDIS_PORT}"
        password: "${REDIS_PASSWORD}"
        
  # ML Model API Keys
  ml_models.yaml: |
    model_endpoints:
      huggingface:
        api_key: "${HUGGINGFACE_API_KEY}"
      openai:
        api_key: "${OPENAI_API_KEY}"