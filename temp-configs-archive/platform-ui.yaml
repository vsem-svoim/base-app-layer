---
apiVersion: v1
kind: Namespace
metadata:
  name: platform-ui
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: platform-ui
  namespace: platform-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: platform-ui
  template:
    metadata:
      labels:
        app: platform-ui
    spec:
      containers:
      - name: platform-ui
        image: nginx:1.25
        ports:
        - containerPort: 80
        volumeMounts:
        - name: config
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: config
        configMap:
          name: platform-ui-config
---
apiVersion: v1
kind: Service
metadata:
  name: platform-ui
  namespace: platform-ui
spec:
  selector:
    app: platform-ui
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: platform-ui-config
  namespace: platform-ui
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>BASE Platform - Production Dashboard</title>
        <style>
            body { font-family: Arial; margin: 40px; background: #f5f5f5; }
            .container { max-width: 1200px; margin: 0 auto; background: white; padding: 40px; border-radius: 8px; }
            .services { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 30px; }
            .service { padding: 20px; border: 1px solid #ddd; border-radius: 6px; }
            .status-healthy { color: #28a745; font-weight: bold; }
            .status-starting { color: #ffc107; font-weight: bold; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>BASE App Layer - Production Platform</h1>
            <p>Enterprise data platform running on AWS EKS with wave-based GitOps deployment</p>
            
            <div class="services">
                <div class="service">
                    <h3>Core Infrastructure</h3>
                    <div class="status-healthy">‚úÖ HEALTHY</div>
                    <p>EKS Clusters, VPC, IAM, Storage</p>
                </div>
                
                <div class="service">
                    <h3>Monitoring Stack</h3>
                    <div class="status-healthy">‚úÖ HEALTHY</div>
                    <p>Prometheus, Grafana, Metrics Server</p>
                </div>
                
                <div class="service">
                    <h3>Logging Stack</h3>
                    <div class="status-healthy">‚úÖ HEALTHY</div>
                    <p>Elasticsearch, Kibana</p>
                </div>
                
                <div class="service">
                    <h3>Service Mesh</h3>
                    <div class="status-healthy">‚úÖ HEALTHY</div>
                    <p>Istio 1.27.0, Ingress Gateway</p>
                </div>
                
                <div class="service">
                    <h3>Orchestration</h3>
                    <div class="status-starting">üîÑ DEPLOYING</div>
                    <p>Airflow, MLflow</p>
                </div>
                
                <div class="service">
                    <h3>BASE Data Modules</h3>
                    <div class="status-starting">‚è≥ PENDING</div>
                    <p>14 data processing modules</p>
                </div>
            </div>
            
            <h3>Quick Status</h3>
            <pre>
Wave 0 (Core): ‚úÖ ArgoCD, Vault, Cert-Manager, AWS LB Controller
Wave 1 (Shared): ‚úÖ Monitoring, Logging, Service Mesh, Metrics
Wave 2 (Orchestration): üîÑ Airflow, MLflow
Wave 3 (Applications): ‚úÖ Platform UI
Waves 4-7 (BASE): ‚è≥ 14 data modules pending

Platform Status: 75% Complete
            </pre>
        </div>
    </body>
    </html>
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: platform-ui-ingress
  namespace: platform-ui
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: platform-ui
            port:
              number: 80